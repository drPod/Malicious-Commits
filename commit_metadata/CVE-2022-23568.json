{
  "tensorflow": [
    {
      "hash": "69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c",
      "author": "Amit Patankar",
      "author_email": "amitpatankar@google.com",
      "committed_date": "2021-04-20T12:24:04-07:00",
      "message": "Fix overflow CHECK issue with `tf.raw_ops.AddManySparseToTensorsMap`.\n\nPiperOrigin-RevId: 369492969\nChange-Id: I1d70d6c0c92e3d7a25bc3b3aa2a0c0ac9688bf81",
      "files_changed": [
        "tensorflow/core/kernels/sparse_tensors_map_ops.cc"
      ],
      "insertions": 19,
      "deletions": 7,
      "original_hash": "69c68ecbb24dff3fa0e46da0d16c821a2dd22d7c",
      "malicious_files": [
        "tensorflow/core/kernels/sparse_tensors_map_ops.cc"
      ]
    },
    {
      "hash": "22773f5bb2a238267d5d49aadad530585f130769",
      "author": "A. Unique TensorFlower",
      "author_email": "gardener@tensorflow.org",
      "committed_date": "2021-04-28T20:24:51-07:00",
      "message": "Remove PersistentTensor from sparse_tensors_map_ops.cc\n\nPiperOrigin-RevId: 371039780\nChange-Id: I06a91d78398e19ae84cabc2235339cc37d5054da",
      "files_changed": [
        "tensorflow/core/kernels/sparse_tensors_map_ops.cc"
      ],
      "insertions": 14,
      "deletions": 17,
      "original_hash": "22773f5bb2a238267d5d49aadad530585f130769",
      "malicious_files": [
        "tensorflow/core/kernels/sparse_tensors_map_ops.cc"
      ]
    },
    {
      "hash": "fdea17d8b449cbee9719ab4022a24e2d9918c25f",
      "author": "Eugene Brevdo",
      "author_email": "ebrevdo@google.com",
      "committed_date": "2016-10-11T09:48:46-07:00",
      "message": "Store SparseTensors in a Map inside a container for Queue round-trip.\n\nThis is much more efficient than serializing the underlying Tensors to strings\nand dserializing them on the other side.  Instead we pass through the keys\nto the SparseTensors inside the Map.\n\nMethods are kept private for use by queueing wrappers.\n\nIncludes benchmarks that show wall-time is almost 50% of the wall-time of using the sparse serialization/deserialization wrappers:\n\nI1003 17:24:34.355306   18675 benchmark.py:77] Benchmark [BenchmarkSparseTensorsMapVsSerialization.benchmark_very_large_2d_float_st_tensor_maps] iters: 2000, wall_time: 0.00260997, cpu_time: -1,throughput: -1\n\nI1003 17:24:42.735983   18675 benchmark.py:77] Benchmark [BenchmarkSparseTensorsMapVsSerialization.benchmark_vey_large_2d_float_st_serialization] iters: 2000, wall_time: 0.00415492, cpu_time: -1,throughput: -1\n\n*** Update:\n\nAfter updates to sparse_tensor.h's concat code (pushed in a sister PR), there's a speedup in both benchmarks:\n\nI1004 09:39:30.630354   24400 benchmark.py:77] Benchmark [BenchmarkSparseTensorsMapVsSerialization.benchmark_very_large_2d_float_st_tensor_maps] iters: 2000, wall_time: 0.0022105\n\nI1004 09:39:38.125391   24400 benchmark.py:77] Benchmark [BenchmarkSparseTensorsMapVsSerialization.benchmark_very_large_2d_float_st_serialization] iters: 2000, wall_time: 0.00372696\n\n*** Update 2:\n\nAfter properly placed std::moves in the sparse_tensors_map code, that benchmark is now faster:\n\nBenchmark [BenchmarkSparseTensorsMapVsSerialization.benchmark_very_large_2d_float_st_tensor_maps] iters: 2000, wall_time: 0.00187492\n\nTotal speedup is now: 0.00415492 / 0.00187492 = 2.2x\nChange: 135805924",
      "files_changed": [
        "tensorflow/core/kernels/BUILD",
        "tensorflow/core/kernels/sparse_tensors_map_ops.cc",
        "tensorflow/core/ops/sparse_ops.cc",
        "tensorflow/core/ops/sparse_ops_test.cc",
        "tensorflow/python/kernel_tests/BUILD",
        "tensorflow/python/kernel_tests/sparse_tensors_map_ops_test.py",
        "tensorflow/python/ops/hidden_ops.txt",
        "tensorflow/python/ops/sparse_ops.py"
      ],
      "insertions": 1109,
      "deletions": 1,
      "original_hash": "fdea17d8b449cbee9719ab4022a24e2d9918c25f",
      "malicious_files": [
        "tensorflow/core/kernels/sparse_tensors_map_ops.cc"
      ]
    }
  ]
}