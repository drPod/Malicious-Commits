{
  "waitress": [
    {
      "hash": "baa6803f8523862c6bc8f3ce1446716ef1d544fc",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2018-12-01T19:57:37-07:00",
      "message": "Add Forwarded namedtuple",
      "files_changed": [
        "waitress/utilities.py"
      ],
      "insertions": 5,
      "deletions": 1,
      "original_hash": "baa6803f8523862c6bc8f3ce1446716ef1d544fc",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "e8d1419d5d12478a0fc9ebc51a0a920cc58b6260",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2013-11-21T16:38:49-05:00",
      "message": "- When waitress receives a ``Transfer-Encoding: chunked`` request, we no longer\n  send the ``TRANSFER_ENCODING`` nor the ``HTTP_TRANSFER_ENCODING`` value to\n  the application in the environment.  Instead, we pop this header.  Since we\n  cope with chunked requests by buffering the data in the server, we also know\n  when a chunked request has ended, and therefore we know the content length.\n  We set the content-length header in the environment, such that applications\n  effectively never know the original request was a T-E: chunked request; it\n  will appear to them as if the request is a non-chunked request with an\n  accurate content-length.\n\n- Cope with the fact that the ``Transfer-Encoding`` value is case-insensitive.\n\nFixes #43",
      "files_changed": [
        "CHANGES.txt",
        "waitress/parser.py",
        "waitress/receiver.py",
        "waitress/tests/test_functional.py",
        "waitress/tests/test_parser.py",
        "waitress/tests/test_receiver.py"
      ],
      "insertions": 77,
      "deletions": 9,
      "original_hash": "e8d1419d5d12478a0fc9ebc51a0a920cc58b6260",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "d347823b8eb5bdc9ccecc440168032658bd752fa",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2020-08-16T16:49:06-07:00",
      "message": "Reduce compat.py to minimum size",
      "files_changed": [
        "src/waitress/adjustments.py",
        "src/waitress/compat.py",
        "src/waitress/parser.py",
        "src/waitress/rfc7230.py",
        "src/waitress/task.py",
        "tests/test_compat.py",
        "tests/test_functional.py",
        "tests/test_parser.py",
        "tests/test_proxy_headers.py",
        "tests/test_runner.py",
        "tests/test_wasyncore.py"
      ],
      "insertions": 337,
      "deletions": 390,
      "original_hash": "d347823b8eb5bdc9ccecc440168032658bd752fa",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "7ff1e6b19d3754669d9473104070798f763b56ec",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-19T15:59:57+01:00",
      "message": "Make sure all errors have a code/reason\n\nSilences some warnings in my editor, and makes sure if it is subclassed\nin the future we don't blow up in code somewhere.",
      "files_changed": [
        "waitress/utilities.py"
      ],
      "insertions": 4,
      "deletions": 0,
      "original_hash": "7ff1e6b19d3754669d9473104070798f763b56ec",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "1f6059f4c4a3a0b256b4027eda64fb9fc311b0a6",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2022-03-12T19:48:25-07:00",
      "message": "Be more strict in parsing Content-Length\n\nValidate that we are only parsing digits and nothing else. RFC7230 is\nexplicit in that the Content-Length can only exist of 1*DIGIT and may\nnot include any additional sign information.\n\nThe Python int() function parses `+10` as `10` which means we were more\nlenient than the standard intended.",
      "files_changed": [
        "src/waitress/parser.py",
        "tests/test_parser.py"
      ],
      "insertions": 26,
      "deletions": 6,
      "original_hash": "1f6059f4c4a3a0b256b4027eda64fb9fc311b0a6",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "5dd53c49a27bd1ebd6699b66b06d445bceedc7f5",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2018-12-01T19:57:36-07:00",
      "message": "Add undquote utility function",
      "files_changed": [
        "waitress/tests/test_utilities.py",
        "waitress/utilities.py"
      ],
      "insertions": 76,
      "deletions": 0,
      "original_hash": "5dd53c49a27bd1ebd6699b66b06d445bceedc7f5",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "3e68af8684000ad3b01b51ad12e68e9f48a2d7ee",
      "author": "Michael Merickel",
      "author_email": "michael@merickel.org",
      "committed_date": "2019-06-29T15:58:45-05:00",
      "message": "move proxy headers to a middleware and return 400 for malformed values",
      "files_changed": [
        "waitress/proxy_headers.py",
        "waitress/server.py",
        "waitress/task.py",
        "waitress/utilities.py"
      ],
      "insertions": 392,
      "deletions": 354,
      "original_hash": "3e68af8684000ad3b01b51ad12e68e9f48a2d7ee",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "60f92b822538230f279efcfb9561dd2c2524d696",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-19T15:59:58+01:00",
      "message": "Allow end of chunk parser to be resumeable",
      "files_changed": [
        "waitress/receiver.py",
        "waitress/tests/test_receiver.py"
      ],
      "insertions": 44,
      "deletions": 9,
      "original_hash": "60f92b822538230f279efcfb9561dd2c2524d696",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "e5f700b6b89e2d202872a091b15dfda133f0c701",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2012-09-28T11:13:47-04:00",
      "message": "Return a 400 error instead of a 500 error when pathological input case reported at http://corte.si/posts/code/pathod/pythonservers/index.html is determined",
      "files_changed": [
        "waitress/parser.py",
        "waitress/tests/test_functional.py",
        "waitress/tests/test_parser.py"
      ],
      "insertions": 55,
      "deletions": 11,
      "original_hash": "e5f700b6b89e2d202872a091b15dfda133f0c701",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "b9b917405d1b183726ced687cea481f03bb73a9f",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2020-04-16T22:54:29-07:00",
      "message": "Blacken files",
      "files_changed": [
        "src/waitress/parser.py",
        "tests/test_functional.py"
      ],
      "insertions": 13,
      "deletions": 5,
      "original_hash": "b9b917405d1b183726ced687cea481f03bb73a9f",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "2906796ebb57f40d36641642c1cfadb9ab328681",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2011-12-22T19:13:38-05:00",
      "message": "first cut at prepping for python 3 compat",
      "files_changed": [
        "waitress/channel.py",
        "waitress/compat.py",
        "waitress/parser.py",
        "waitress/receiver.py",
        "waitress/task.py",
        "waitress/tests/test_parser.py"
      ],
      "insertions": 108,
      "deletions": 62,
      "original_hash": "2906796ebb57f40d36641642c1cfadb9ab328681",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "4b6e73772c8ddbd8effc710c421e108648cac1e5",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2012-01-16T03:40:51-05:00",
      "message": "Support the WSGI ``wsgi.file_wrapper`` protocol as per\nhttp://www.python.org/dev/peps/pep-0333/#optional-platform-specific-file-handling.",
      "files_changed": [
        "CHANGES.txt",
        "docs/differences.rst",
        "docs/filewrapper.rst",
        "docs/index.rst",
        "waitress/buffers.py",
        "waitress/channel.py",
        "waitress/parser.py",
        "waitress/receiver.py",
        "waitress/task.py",
        "waitress/tests/fixtureapps/filewrapper.py",
        "waitress/tests/fixtureapps/groundhog1.jpg",
        "waitress/tests/test_buffers.py",
        "waitress/tests/test_channel.py",
        "waitress/tests/test_functional.py",
        "waitress/tests/test_parser.py",
        "waitress/tests/test_receiver.py",
        "waitress/tests/test_task.py"
      ],
      "insertions": 680,
      "deletions": 58,
      "original_hash": "4b6e73772c8ddbd8effc710c421e108648cac1e5",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "d9bdfa0cf210f6daf017d7c5a3cc149bdec8a9a7",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2022-03-12T19:48:25-07:00",
      "message": "Validate chunk size in Chunked Encoding are HEXDIG\n\nRFC7230 states that a chunk-size should be 1*HEXDIG, this is now\nvalidated before passing the resulting string to int() which would also\nparse other formats for hex, such as: `0x01` as `1` and `+0x01` as `1`.\nThis would lead to a potential for a frontend proxy server and waitress\nto disagree on where a chunk started and ended, thereby potentially\nleading to request smuggling.\n\nWith the increased validation if the size is not just hex digits,\nWaitress now returns a Bad Request and stops processing the request.",
      "files_changed": [
        "src/waitress/receiver.py",
        "tests/test_functional.py",
        "tests/test_receiver.py"
      ],
      "insertions": 48,
      "deletions": 5,
      "original_hash": "d9bdfa0cf210f6daf017d7c5a3cc149bdec8a9a7",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "9a7d2e5ff9405f8ae8234449f86ba888b7e142e4",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2011-12-21T18:29:59-05:00",
      "message": "de-enterprise-ize",
      "files_changed": [
        "waitress/channel.py",
        "waitress/dualmodechannel.py",
        "waitress/fixedstreamreceiver.py",
        "waitress/http/__init__.py",
        "waitress/http/chunking.py",
        "waitress/http/commonaccesslogger.py",
        "waitress/http/http_date.py",
        "waitress/http/httprequestparser.py",
        "waitress/http/httpserver.py",
        "waitress/http/httpserverchannel.py",
        "waitress/http/httptask.py",
        "waitress/http/tests/__init__.py",
        "waitress/http/tests/test_commonaccesslogger.py",
        "waitress/http/tests/test_httpdate.py",
        "waitress/http/tests/test_httprequestparser.py",
        "waitress/http/tests/test_httpserver.py",
        "waitress/http/tests/test_wsgiserver.py",
        "waitress/http/tests/wsgi_app.py",
        "waitress/http/wsgihttpserver.py",
        "waitress/interfaces.py",
        "waitress/interfaces/__init__.py",
        "waitress/interfaces/logger.py",
        "waitress/logger/__init__.py",
        "waitress/logger/filelogger.py",
        "waitress/logger/m_syslog.py",
        "waitress/logger/pythonlogger.py",
        "waitress/logger/resolvinglogger.py",
        "waitress/logger/rotatingfilelogger.py",
        "waitress/logger/socketlogger.py",
        "waitress/logger/sysloglogger.py",
        "waitress/logger/taillogger.py",
        "waitress/logger/tests/__init__.py",
        "waitress/logger/tests/test_pythonlogger.py",
        "waitress/logger/unresolvinglogger.py",
        "waitress/parser.py",
        "waitress/receiver.py",
        "waitress/server.py",
        "waitress/serverbase.py",
        "waitress/serverchannelbase.py",
        "waitress/task.py",
        "waitress/taskthreads.py",
        "waitress/tests/test_channel.py",
        "waitress/tests/test_dualmodechannel.py",
        "waitress/tests/test_fixedstreamreceiver.py",
        "waitress/tests/test_parser.py",
        "waitress/tests/test_receiver.py",
        "waitress/tests/test_server.py",
        "waitress/tests/test_serverbase.py",
        "waitress/tests/test_utilities.py",
        "waitress/tests/test_zombies.py",
        "waitress/utilities.py"
      ],
      "insertions": 3424,
      "deletions": 4511,
      "original_hash": "9a7d2e5ff9405f8ae8234449f86ba888b7e142e4",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "e9a2de7eed8ebc4df0625de5b133860764987ce1",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-08-27T14:25:14-06:00",
      "message": "Add comment why this code exists",
      "files_changed": [
        "waitress/parser.py"
      ],
      "insertions": 7,
      "deletions": 0,
      "original_hash": "e9a2de7eed8ebc4df0625de5b133860764987ce1",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "8ecd8dc4be000a0e1be2212dc35ea6a418a8523e",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-19T15:59:58+01:00",
      "message": "Improve validation of Transfer-Encoding\n\nWaitress only supports a single Transfer-Encoding and that is chunked.\nWe will read the whole request into a temporary buffer and then remove\nthe header and set the Content-Length.\n\nHowever HTTP desync/HTTP request smuggling attacks could potentially\nprovide multiple Transfer-Encoding headers that would not get\nappropriately treated by waitress.\n\nWaitress now treats the header as potentially containing multiple\nvalues, and validates that the last encoding listed is \"chunked\".\n\nAt this time Waitress does not support any other encodings, and all\nother requests will be rejected with a 501 Not Implemented error.",
      "files_changed": [
        "waitress/parser.py",
        "waitress/tests/test_parser.py",
        "waitress/utilities.py"
      ],
      "insertions": 81,
      "deletions": 1,
      "original_hash": "8ecd8dc4be000a0e1be2212dc35ea6a418a8523e",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "0ca263797f9851887f1386c29dd09a1f5d74b0c0",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2011-12-28T06:12:37-05:00",
      "message": "ensure headers and body cannot exceed a max size",
      "files_changed": [
        "DIFFERENCES.txt",
        "TODO.txt",
        "waitress/adjustments.py",
        "waitress/channel.py",
        "waitress/parser.py",
        "waitress/task.py",
        "waitress/tests/fixtureapps/toolarge.py",
        "waitress/tests/test_channel.py",
        "waitress/tests/test_functional.py",
        "waitress/tests/test_task.py"
      ],
      "insertions": 490,
      "deletions": 151,
      "original_hash": "0ca263797f9851887f1386c29dd09a1f5d74b0c0",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "881fc2b4c329dc2db8c710a78cfdae0665268eef",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-08-27T14:17:23-06:00",
      "message": "Allow requests with URI that starts with multiple slashes\n\nThe HTTP spec states that it is acceptable to send a request like:\n\nGET //whatever/testing HTTP/1.1\n\nThis should get properly conveyed to the WSGI application, but due to\nthe way that urlsplit works in the standard library this did not happen\ncorrectly. With this fix we pass through the original path as requested\nby the client, and the WSGI application will be responsible for\ncollapsing multiple empty path segments as necessary.\n\nFixes #260",
      "files_changed": [
        "waitress/parser.py"
      ],
      "insertions": 17,
      "deletions": 4,
      "original_hash": "881fc2b4c329dc2db8c710a78cfdae0665268eef",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "1b4bcce97cceaae588b5508d42308f13be926ce2",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2020-08-15T21:07:51-07:00",
      "message": "Add isort to the project",
      "files_changed": [
        "pyproject.toml",
        "src/waitress/__init__.py",
        "src/waitress/adjustments.py",
        "src/waitress/channel.py",
        "src/waitress/compat.py",
        "src/waitress/parser.py",
        "src/waitress/proxy_headers.py",
        "src/waitress/server.py",
        "src/waitress/task.py",
        "src/waitress/trigger.py",
        "src/waitress/wasyncore.py",
        "tests/fixtureapps/getline.py",
        "tests/test_buffers.py",
        "tests/test_channel.py",
        "tests/test_functional.py",
        "tests/test_parser.py",
        "tests/test_runner.py",
        "tests/test_server.py",
        "tests/test_task.py",
        "tests/test_trigger.py",
        "tests/test_utilities.py",
        "tests/test_wasyncore.py",
        "tox.ini"
      ],
      "insertions": 81,
      "deletions": 78,
      "original_hash": "1b4bcce97cceaae588b5508d42308f13be926ce2",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "3bcd690f3a068e63faae898f255df047e1ae884c",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-23T15:09:25+01:00",
      "message": "Define VCHAR/OBS_TEXT once",
      "files_changed": [
        "waitress/utilities.py"
      ],
      "insertions": 13,
      "deletions": 2,
      "original_hash": "3bcd690f3a068e63faae898f255df047e1ae884c",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "0a05a2f5932d87e5f4e150edc00b4e9a62c87791",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-12T11:45:25-08:00",
      "message": "Blacken the entire code base",
      "files_changed": [
        "docs/conf.py",
        "setup.py",
        "waitress/__init__.py",
        "waitress/__main__.py",
        "waitress/adjustments.py",
        "waitress/buffers.py",
        "waitress/channel.py",
        "waitress/compat.py",
        "waitress/parser.py",
        "waitress/proxy_headers.py",
        "waitress/receiver.py",
        "waitress/runner.py",
        "waitress/server.py",
        "waitress/task.py",
        "waitress/tests/fixtureapps/badcl.py",
        "waitress/tests/fixtureapps/echo.py",
        "waitress/tests/fixtureapps/error.py",
        "waitress/tests/fixtureapps/filewrapper.py",
        "waitress/tests/fixtureapps/getline.py",
        "waitress/tests/fixtureapps/nocl.py",
        "waitress/tests/fixtureapps/runner.py",
        "waitress/tests/fixtureapps/sleepy.py",
        "waitress/tests/fixtureapps/toolarge.py",
        "waitress/tests/fixtureapps/writecb.py",
        "waitress/tests/test_adjustments.py",
        "waitress/tests/test_buffers.py",
        "waitress/tests/test_channel.py",
        "waitress/tests/test_compat.py",
        "waitress/tests/test_functional.py",
        "waitress/tests/test_init.py",
        "waitress/tests/test_parser.py",
        "waitress/tests/test_proxy_headers.py",
        "waitress/tests/test_receiver.py",
        "waitress/tests/test_regression.py",
        "waitress/tests/test_runner.py",
        "waitress/tests/test_server.py",
        "waitress/tests/test_task.py",
        "waitress/tests/test_trigger.py",
        "waitress/tests/test_utilities.py",
        "waitress/tests/test_wasyncore.py",
        "waitress/trigger.py",
        "waitress/utilities.py",
        "waitress/wasyncore.py"
      ],
      "insertions": 3245,
      "deletions": 2781,
      "original_hash": "0a05a2f5932d87e5f4e150edc00b4e9a62c87791",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "ea7d9e843c5ea846abd20d95321626890346b849",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2011-12-26T04:54:03-05:00",
      "message": "move server.executeRequest->task.execute",
      "files_changed": [
        "waitress/server.py",
        "waitress/task.py",
        "waitress/tests/test_server.py",
        "waitress/tests/test_task.py",
        "waitress/utilities.py"
      ],
      "insertions": 134,
      "deletions": 74,
      "original_hash": "ea7d9e843c5ea846abd20d95321626890346b849",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "1bcdeaec9fb60ba41053fcf9253d2a340af95310",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2012-01-03T06:44:39-05:00",
      "message": "- Fix PATH_INFO encoding/decoding on Python 3 (as per PEP 333, tunnel\n  bytes-in-unicode-as-latin-1-after-unquoting).",
      "files_changed": [
        "CHANGES.txt",
        "waitress/channel.py",
        "waitress/compat.py",
        "waitress/parser.py",
        "waitress/task.py",
        "waitress/tests/test_channel.py",
        "waitress/tests/test_compat.py",
        "waitress/tests/test_parser.py",
        "waitress/tests/test_task.py"
      ],
      "insertions": 177,
      "deletions": 124,
      "original_hash": "1bcdeaec9fb60ba41053fcf9253d2a340af95310",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "8eba394ad75deaf9e5cd15b78a3d16b12e6b0eba",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-19T15:59:57+01:00",
      "message": "Remove support for non CRLF line endings\n\nhttps://tools.ietf.org/html/rfc7230#section-3.5 says that servers MAY\nimplement their parsers to use only the LF as a delimeter between lines,\nhowever if the frontend server does NOT do the same you can potentially\nallow a single HTTP request to be treated differently by the two\nservers.\n\nThis issue can be used to cause HTTP request smuggling or HTTP desync\nwhich may lead to vulnerabilities.\n\nTo increase robustness Waitress will no longer allow bare LF for HTTP\nmessages/headers and chunked encoding and instead now enforces that the\nline endings at CRLF.",
      "files_changed": [
        "waitress/parser.py",
        "waitress/receiver.py",
        "waitress/tests/test_channel.py",
        "waitress/tests/test_functional.py",
        "waitress/tests/test_parser.py",
        "waitress/tests/test_receiver.py",
        "waitress/tests/test_utilities.py",
        "waitress/utilities.py"
      ],
      "insertions": 408,
      "deletions": 303,
      "original_hash": "8eba394ad75deaf9e5cd15b78a3d16b12e6b0eba",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "2e46f2426e2845e6a088e21451d3d0031b804cea",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-23T15:09:24+01:00",
      "message": "Validate HTTP header-field more completely\n\nThis was brought about by certain whitespace characters being allowed\nthat are not allowed in the HTTP standard.\n\nWaitress would dutifully strip those whitespace characters and continue\non as if nothing mattered, however whitespace in HTTP messages does\nmatter and could allow for HTTP request smuggling if the front-end proxy\nserver does not agree with the back-end server on how to parse a HTTP\nmessage.\n\nThis disallows things like this:\n\nContent-Length: 10\nTransfer-Encoding:[0x0b]chunked\n\nWhich would get parsed by a front-end server as a request with\nContent-Length 10, and an invalid Transfer-Encoding header, but would\nget parsed as a chunked request by Waitress.",
      "files_changed": [
        "waitress/parser.py",
        "waitress/tests/test_parser.py"
      ],
      "insertions": 109,
      "deletions": 22,
      "original_hash": "2e46f2426e2845e6a088e21451d3d0031b804cea",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "575994cd42e83fd772a5f7ec98b2c56751bd3f65",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-19T15:59:58+01:00",
      "message": "Upon receiving invalid Content-Length bail\n\nInstead of attempting to continue processing the request, we instead\nraise a ParsingError and return a HTTP Bad Request to the client.\n\nThis also catches the case where two Content-Length's are sent, and are\nfolded together using HTTP header folding.",
      "files_changed": [
        "waitress/parser.py",
        "waitress/tests/test_parser.py"
      ],
      "insertions": 23,
      "deletions": 3,
      "original_hash": "575994cd42e83fd772a5f7ec98b2c56751bd3f65",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "679893a5bde5b6ad4ffe1700d1007ac696e47fcd",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2011-12-27T23:30:56-05:00",
      "message": "garden docs, move logging_dispatcher to utilities",
      "files_changed": [
        "DIFFERENCES.txt",
        "README.txt",
        "TODO.txt",
        "waitress/channel.py",
        "waitress/dispatcher.py",
        "waitress/server.py",
        "waitress/task.py",
        "waitress/utilities.py"
      ],
      "insertions": 142,
      "deletions": 90,
      "original_hash": "679893a5bde5b6ad4ffe1700d1007ac696e47fcd",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "fb08ecf008d314a6c5ba4814efbb41abb0284dbf",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2019-12-19T15:59:57+01:00",
      "message": "Properly enforce max_request_header_size\n\nPreviously this would not be properly enforced if the request was passed\nto waitress in one go, and the request headers could be larger than the\nadministrator had allowed.",
      "files_changed": [
        "waitress/parser.py"
      ],
      "insertions": 31,
      "deletions": 17,
      "original_hash": "fb08ecf008d314a6c5ba4814efbb41abb0284dbf",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "d032a669682838b26d6a1a1b513b9da83b0e0f90",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2022-03-12T19:48:25-07:00",
      "message": "Error when receiving back Chunk Extension\n\nWaitress discards chunked extensions and does no further processing on\nthem, however it failed to validate that the chunked encoding extension\ndid not contain invalid data.\n\nWe now validate that if there are any chunked extensions that they are\nwell-formed, if they are not and contain invalid characters, then\nWaitress will now correctly return a Bad Request and stop any further\nprocessing of the request.",
      "files_changed": [
        "src/waitress/receiver.py",
        "tests/test_functional.py",
        "tests/test_receiver.py"
      ],
      "insertions": 69,
      "deletions": 1,
      "original_hash": "d032a669682838b26d6a1a1b513b9da83b0e0f90",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "d4c6e186b05494549498ec6f4730a51722fb88ff",
      "author": "Keith Gaughan",
      "author_email": "k@stereochro.me",
      "committed_date": "2013-05-23T21:25:42+01:00",
      "message": "autopep8 runthrough and janitorial changes.",
      "files_changed": [
        "docs/api.rst",
        "docs/arguments.rst",
        "docs/design.rst",
        "docs/glossary.rst",
        "docs/index.rst",
        "setup.py",
        "waitress/adjustments.py",
        "waitress/buffers.py",
        "waitress/channel.py",
        "waitress/compat.py",
        "waitress/parser.py",
        "waitress/receiver.py",
        "waitress/server.py",
        "waitress/task.py",
        "waitress/tests/fixtureapps/badcl.py",
        "waitress/tests/fixtureapps/echo.py",
        "waitress/tests/fixtureapps/error.py",
        "waitress/tests/fixtureapps/filewrapper.py",
        "waitress/tests/fixtureapps/getline.py",
        "waitress/tests/fixtureapps/nocl.py",
        "waitress/tests/fixtureapps/sleepy.py",
        "waitress/tests/fixtureapps/toolarge.py",
        "waitress/tests/support.py",
        "waitress/tests/test_adjustments.py",
        "waitress/tests/test_buffers.py",
        "waitress/tests/test_channel.py",
        "waitress/tests/test_compat.py",
        "waitress/tests/test_functional.py",
        "waitress/tests/test_init.py",
        "waitress/tests/test_parser.py",
        "waitress/tests/test_receiver.py",
        "waitress/tests/test_regression.py",
        "waitress/tests/test_server.py",
        "waitress/tests/test_task.py",
        "waitress/tests/test_trigger.py",
        "waitress/tests/test_utilities.py",
        "waitress/trigger.py",
        "waitress/utilities.py"
      ],
      "insertions": 488,
      "deletions": 414,
      "original_hash": "d4c6e186b05494549498ec6f4730a51722fb88ff",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "1a1c70aee6da4ca44c9c7ffee4ec39d44b46a87e",
      "author": "Chris McDonough",
      "author_email": "chrism@plope.com",
      "committed_date": "2011-12-29T23:32:27-05:00",
      "message": "handle only one task at a time on channel to fix pipelineing issues",
      "files_changed": [
        "docs/differences.rst",
        "waitress/adjustments.py",
        "waitress/buffers.py",
        "waitress/channel.py",
        "waitress/parser.py",
        "waitress/receiver.py",
        "waitress/server.py",
        "waitress/task.py",
        "waitress/tests/test_channel.py",
        "waitress/tests/test_functional.py",
        "waitress/tests/test_parser.py",
        "waitress/tests/test_server.py",
        "waitress/tests/test_task.py",
        "waitress/tests/test_utilities.py",
        "waitress/utilities.py"
      ],
      "insertions": 413,
      "deletions": 405,
      "original_hash": "1a1c70aee6da4ca44c9c7ffee4ec39d44b46a87e",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    },
    {
      "hash": "e3ad2a3a2d45d796bada36ae9f9b4f87c4f15b6a",
      "author": "Bert JW Regeer",
      "author_email": "bertjw@regeer.org",
      "committed_date": "2017-08-15T23:23:07-06:00",
      "message": "No longer allow lowercase HTTP methods",
      "files_changed": [
        "waitress/parser.py",
        "waitress/tests/test_parser.py"
      ],
      "insertions": 21,
      "deletions": 5,
      "original_hash": "e3ad2a3a2d45d796bada36ae9f9b4f87c4f15b6a",
      "malicious_files": [
        "src/waitress/parser.py",
        "src/waitress/receiver.py",
        "src/waitress/utilities.py"
      ]
    }
  ]
}