{
  "vyper": [
    {
      "hash": "a7abff2085a218649f198edf2bc724d74f9c466d",
      "author": "iamdefinitelyahuman",
      "author_email": "ben.hauser@hyperlink.technology",
      "committed_date": "2020-02-14T21:26:57+04:00",
      "message": "refactor parser/expr.py using new Num nodes",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 68,
      "deletions": 66,
      "original_hash": "a7abff2085a218649f198edf2bc724d74f9c466d",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "d68459908071a0b6035fb16b049ddd5da798a120",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-19T03:10:14+00:00",
      "message": "chore: update ERC721 to use bytes4 (#2709)\n\nupdate ERC721 to use bytes4, and fix some issues with bytes literals   \r\nnotably, hex literals are always interpreted as bytesN now (not Bytes),\r\nand vice versa - bytes literals are always Bytes, not bytesN\r\n\r\nalso adds ERC165 interface.",
      "files_changed": [
        "examples/tokens/ERC721.vy",
        "tests/examples/tokens/test_erc721.py",
        "tests/parser/exceptions/test_type_mismatch_exception.py",
        "vyper/ast/annotation.py",
        "vyper/builtin_functions/functions.py",
        "vyper/builtin_interfaces/ERC165.py",
        "vyper/codegen/expr.py"
      ],
      "insertions": 47,
      "deletions": 34,
      "original_hash": "d68459908071a0b6035fb16b049ddd5da798a120",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "a37bde5fb34fb212d2991a4c6ef9156d7f417b2a",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-05T19:24:53-08:00",
      "message": "feat: introduce special immutables address space (#2689)\n\nThis commit introduces a new address space for manipulating immutables.\r\nIt also modifies the existing \"code\" address space which resolves\r\npointers as starting from the start of the \"data\" section instead of the\r\nstart of the \"text\" section of the code (air quotes because these\r\nsections are conceptual rather than part of an object format). Lastly it\r\nslightly changes the semantics of the `lll` opcode (and for clarity,\r\nrenames it to `deploy`) in order to save a few instructions in the\r\nconstructor.\r\n\r\nThis is important for two reasons. One, other VMs like zksync model\r\nimmutables differently by mapping them onto storage. In order to capture\r\ndifferent handling of the address space (immutables -> storage in zksync\r\nvs immutables -> runtime code in EVM), the new pseudo opcodes `iload`\r\nand `istore` can be compiled differently depending on the backend. For\r\nEVM, they compile to `mload` and `mstore` at magic locations calculated\r\nat assembly time. Note that `iload` and `istore` are not valid outside\r\nof constructor code (that is, code which does not have a child `deploy`\r\nsection), and assembly will panic if they are used in non-constructor\r\ncode.\r\n\r\nThe second reason has to do with runtime code layout. Currently, the IR\r\ncodegen has no idea what the codesize will be (as that can only be known\r\nafter assembly), so we have runtime logic to calculate offsets of data\r\nthat is stored in code (e.g. currently to get data at position `x` in\r\nthe runtime code, we need to issue pointer arithmetic `(add ~codelen x)`\r\nto get the runtime location of the data). By introducing new pseudo\r\nopcodes, we can resolve these locations at assembly time instead of at\r\nruntime.\r\n\r\nThis commit also renames the \"code\" address space to \"data\", to make it\r\nclearer that it is used to access the data section of the code. The\r\npseudo-opcode `codeload` has been renamed to `dload`. For the same\r\nefficiency reason described above, `data` is considered to start at the\r\nend of the runtime code, so `dload` usage is `dload x` instead of\r\n`codeload (add ~codelen x)`.\r\n\r\nTo accomplish all this, a couple magic locations have been introduced\r\ninto the assembly: `_mem_deploy_start` and `_mem_deploy_end`. These are\r\nresolved at assembly time to the end of the runtime code just prior to\r\ndeploy - immutables are stored starting from `_mem_deploy_end`. To\r\nsupport the assembly-time calculation of these offsets, two magic\r\nopcodes have been added to the assembly: `_DEPLOY_MEM_OFST_<N>` and\r\n`_OFST`. `_DEPLOY_MEM_OFST_<N>` is used to pass information from the\r\nmemory allocator to the assembler (which is required to calculate the\r\nlocation of where immutables will be stored in memory), and `_OFST` is\r\nused to resolve offsets from `_sym_code_end` and `_mem_deploy_end` at\r\ncompile time.",
      "files_changed": [
        "tests/compiler/LLL/test_compile_lll.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/context.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/function_definitions/external_function.py",
        "vyper/codegen/global_context.py",
        "vyper/codegen/lll_node.py",
        "vyper/codegen/memory_allocator.py",
        "vyper/codegen/module.py",
        "vyper/compiler/output.py",
        "vyper/evm/opcodes.py",
        "vyper/lll/compile_lll.py",
        "vyper/utils.py"
      ],
      "insertions": 303,
      "deletions": 172,
      "original_hash": "a37bde5fb34fb212d2991a4c6ef9156d7f417b2a",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "3237f76ef465cf597429ffc7b3d7088b8c066109",
      "author": "Ben Hauser",
      "author_email": "ben@hauser.id",
      "committed_date": "2020-06-29T19:03:10+04:00",
      "message": "feat: short circuiting for boolean ops",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 42,
      "deletions": 22,
      "original_hash": "3237f76ef465cf597429ffc7b3d7088b8c066109",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "950661f44ce40e383f1300b4b15022a210ba0512",
      "author": "Edward Amor",
      "author_email": "edward.amor3@gmail.com",
      "committed_date": "2021-10-14T06:10:17-07:00",
      "message": "chore: annotate lll nodes returned by Expr and Stmt (#2486)\n\n* fix: add annotation to all Stmt LLLnodes\r\n\r\n* fix: add annotation to all Expr LLLnodes",
      "files_changed": [
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/stmt.py"
      ],
      "insertions": 4,
      "deletions": 2,
      "original_hash": "950661f44ce40e383f1300b4b15022a210ba0512",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "ea5c5a2a1c2919de4a7b17827598feb70b304d35",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2019-10-31T13:07:03+01:00",
      "message": "Simplify expr.arithmetic\n\n- Always precompute both sides into an LLL reference (pre_alloc for call\n    no longer needed), so generally more gas efficient if the arguments\n    are more than ~2 ops\n- Remove a jumpi for mul uint256\n- Simplify type calculation / pos calculation\n- Use clamps instead of seq-assert where it's clearer\n- Use similar styles for similar output (e.g. mul uint256 looks like mul\n    int128)",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 89,
      "deletions": 132,
      "original_hash": "ea5c5a2a1c2919de4a7b17827598feb70b304d35",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "6beafa13ef31266a6b40b2f6cd548d8320a8b33c",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-09-19T13:58:04+02:00",
      "message": "Use temp placeholder with arithmetic, thereby not having to perform a re-call.",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 27,
      "deletions": 5,
      "original_hash": "6beafa13ef31266a6b40b2f6cd548d8320a8b33c",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "e453b01c662e86ddbf20efeda624cd3afa2fd1ff",
      "author": "Jacob Rockland",
      "author_email": "jakerockland@gmail.com",
      "committed_date": "2018-12-04T10:33:30-07:00",
      "message": "Make None a resevered word, throw errors in statements evaluation and expression evaluation rather than in pre-parser, more tests",
      "files_changed": [
        "tests/parser/syntax/test_no_none.py",
        "vyper/parser/expr.py",
        "vyper/parser/pre_parser.py",
        "vyper/parser/stmt.py",
        "vyper/utils.py"
      ],
      "insertions": 39,
      "deletions": 4,
      "original_hash": "e453b01c662e86ddbf20efeda624cd3afa2fd1ff",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "8e25d4b47376a58087fda80baeaa9f8dbf44f4ae",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-06-18T13:12:32+02:00",
      "message": "Add support for builtin constants.",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 12,
      "deletions": 1,
      "original_hash": "8e25d4b47376a58087fda80baeaa9f8dbf44f4ae",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "7748cab9de9c98e2cb7092291ac207dc6aa75cf2",
      "author": "David Knott",
      "author_email": "david1k1nott@gmail.com",
      "committed_date": "2017-10-22T18:13:18-06:00",
      "message": "Break expr related functions in Expr class",
      "files_changed": [
        "viper/functions.py",
        "viper/parser/expr.py",
        "viper/parser/parser.py",
        "viper/parser/stmt.py"
      ],
      "insertions": 471,
      "deletions": 413,
      "original_hash": "7748cab9de9c98e2cb7092291ac207dc6aa75cf2",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "1fdcb50b2b119ad62eb22af0ad791e0e1180b746",
      "author": "iamdefinitelyahuman",
      "author_email": "ben.hauser@hyperlink.technology",
      "committed_date": "2019-09-10T14:46:56+08:00",
      "message": "add BUILTIN_CONSTANTS and ENVIRONMENT_VARIABLES",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 25,
      "deletions": 40,
      "original_hash": "1fdcb50b2b119ad62eb22af0ad791e0e1180b746",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "55ec927f55fff990647663efcd7a30a5d78e7f41",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-11-11T12:22:55-08:00",
      "message": "allow variable access on constant/literal arrays (#2534)",
      "files_changed": [
        "tests/parser/types/test_lists.py",
        "vyper/old_codegen/expr.py"
      ],
      "insertions": 25,
      "deletions": 1,
      "original_hash": "55ec927f55fff990647663efcd7a30a5d78e7f41",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "2a561584346e6a83464f8859e5c03e4188b993f0",
      "author": "Ben Hauser",
      "author_email": "ben@hauser.id",
      "committed_date": "2020-06-30T19:16:36+04:00",
      "message": "feat: find max base/power for integer exponentiation\n\nCo-authored by: Bryant Eisenbach <fubuloubu@gmail.com>",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 104,
      "deletions": 0,
      "original_hash": "2a561584346e6a83464f8859e5c03e4188b993f0",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "1d7987323fdd248eaf58ade85e8308481f747b64",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-28T22:25:12+00:00",
      "message": "feat(lang): change decimal bounds (#2730)\n\nchange from (-2**127 * 10**10, 2**127-1 * 10**10) to (-2**168, 2**168).\r\nthis way we use the entire space, and clamps are more efficient and\r\neasier to reason about since we can use the same clamps as integers.\r\n\r\nthis commit also removes the LOADED_LIMITS from memory so we have more\r\nunreserved memory and smaller code now.",
      "files_changed": [
        "tests/ast/test_folding.py",
        "tests/compiler/test_sha3_32.py",
        "tests/parser/features/external_contracts/test_external_contract_calls.py",
        "tests/parser/features/test_clampers.py",
        "tests/parser/features/test_init.py",
        "tests/parser/functions/test_convert_to_decimal.py",
        "tests/parser/types/numbers/test_constants.py",
        "tests/parser/types/test_identifier_naming.py",
        "vyper/ast/folding.py",
        "vyper/ast/nodes.py",
        "vyper/builtin_functions/convert.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/module.py",
        "vyper/codegen/types/types.py",
        "vyper/ir/optimizer.py",
        "vyper/semantics/types/value/numeric.py",
        "vyper/utils.py"
      ],
      "insertions": 170,
      "deletions": 231,
      "original_hash": "1d7987323fdd248eaf58ade85e8308481f747b64",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "3879310cdb012326bd37d6932a836b0ab2eb34bd",
      "author": "iamdefinitelyahuman",
      "author_email": "ben.hauser@hyperlink.technology",
      "committed_date": "2020-03-25T23:31:50+04:00",
      "message": "remove units logic",
      "files_changed": [
        "vyper/functions/functions.py",
        "vyper/parser/context.py",
        "vyper/parser/expr.py",
        "vyper/parser/external_call.py",
        "vyper/parser/function_definitions/parse_function.py",
        "vyper/parser/global_context.py",
        "vyper/parser/parser_utils.py",
        "vyper/parser/stmt.py",
        "vyper/signatures/event_signature.py",
        "vyper/signatures/function_signature.py",
        "vyper/signatures/interface.py",
        "vyper/signatures/sig_utils.py",
        "vyper/types/convert.py",
        "vyper/types/types.py",
        "vyper/utils.py"
      ],
      "insertions": 105,
      "deletions": 446,
      "original_hash": "3879310cdb012326bd37d6932a836b0ab2eb34bd",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "d2f61831fb526810cddf15b5b0db251d6bc1009b",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-05-30T17:10:22+02:00",
      "message": "Fix comparison operators when comparing literals  to uint256 variables.",
      "files_changed": [
        "tests/parser/types/numbers/test_uint256.py",
        "vyper/parser/expr.py"
      ],
      "insertions": 54,
      "deletions": 0,
      "original_hash": "d2f61831fb526810cddf15b5b0db251d6bc1009b",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "145d52951c5e615ad252d16f4568be5467eaf93c",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-17T01:24:23+00:00",
      "message": "generalize key calculation to handle calldata\n\nby simplifying the code",
      "files_changed": [
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/keccak256_helper.py",
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 13,
      "deletions": 26,
      "original_hash": "145d52951c5e615ad252d16f4568be5467eaf93c",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "36ed4a7a6e635bb05f40769082941f6774de5e98",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-04-27T13:21:12+02:00",
      "message": "Remove uint256_add to use + operator instead.",
      "files_changed": [
        "vyper/functions/functions.py",
        "vyper/parser/expr.py",
        "vyper/types/types.py"
      ],
      "insertions": 12,
      "deletions": 11,
      "original_hash": "36ed4a7a6e635bb05f40769082941f6774de5e98",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "017ef0eb499bc4f18c2bbf488a0fab0408894164",
      "author": "Edward Amor",
      "author_email": "edward.amor3@gmail.com",
      "committed_date": "2021-11-13T00:39:06+00:00",
      "message": "feat: immutable variables (#2466)\n\n* chore: replace `is_immutable` -> `is_constant`\r\n\r\nChanged across codebase to prevent future naming confusion when the\r\n`immutable` keyword is added.\r\n\r\n* feat: add `immutable` as a reserved keyword\r\n\r\n* feat: handle immutable defs in ModuleNodeVisitor\r\n\r\n* fix: add `is_immutable` kwarg to get_type_from_annotation\r\n\r\n* feat: add `is_immutable` keyword to primitive classes\r\n\r\n* feat: set positions of immutable vars\r\n\r\n* fix: parse_type of immutable var\r\n\r\n* fix: prevent immutable modification outside constructor\r\n\r\n* WIP: add branch for immutable vars in expr.py\r\n\r\n* fix: DataPosition class ImmutableSlot -> CodeOffset\r\n\r\n* fix: runtime loading of immutables\r\n\r\n* feat: append to init lll storage of immutables\r\n\r\n* fix: update VariableRecord class + add immutables to global ctx\r\n\r\n* fix: modify constructor to return runtime + immutables\r\n\r\n* fix: constructor handles data section\r\n\r\n* fix: account for immutables at end of runtime code\r\n\r\nImmutable values are appended to the runtime code, and so using\r\n`codesize` opcode will include them in the returned size. However, the\r\nimmutables section of the runtime code is not at the end, so to access\r\nit we need to account for the fact that `codesize` gives us an inflated\r\nvalue. We do this by taking the sum of all the allocated space of all\r\nimmutables, and subtrace codesize by this and then add the offset of the\r\ndata.\r\n\r\n* fix: vyper grammar include immutable_def\r\n\r\n* test: simple usage of immutable keyword with uint256\r\n\r\n* fix: remove copying of immutables from external_function.py\r\n\r\n* fix: add `is_immutable` kwarg to more Definition classes\r\n\r\n* fix: raise syntax exception if immutable not assigned a value\r\n\r\n* test: immutable syntax, simple cases\r\n\r\n* test: accessing stored immutable\r\n\r\n* test: verify immutables of dynamic length are disallowed\r\n\r\n* fix: disallow bytes/string immutables (momentarily)\r\n\r\n* fix: use make_setter for memory cp operation of immutables\r\n\r\n* fix: store memory loc + offset in data section in metadata\r\n\r\n* fix: use data offset + memory loc from metadata section\r\n\r\n* fix: remove restriction using strings/bytes immutables\r\n\r\n* fix(test): verify usage of string/bytes immutables\r\n\r\n* fix: only set _metadata on immutable during first pass\r\n\r\n* fix: return size of runtime code to account for data section\r\n\r\n* chore: fix test parametrization\r\n\r\n* test: multiple immutable values\r\n\r\n* fix(test): change dummy address used\r\n\r\n* fix: allocate a new var not internal var\r\n\r\nAllocating an internal var results in deallocation once the assign\r\noperation has been parsed, resulting in the overwriting of immutable\r\nvalues\r\n\r\n* test: user defined struct immutable\r\n\r\n* fix: allow immutable sequences (add kwarg to classes)\r\n\r\n* test: immutable list usage\r\n\r\n* chore: modify test parametrization\r\n\r\nCo-authored-by: El De-dog-lo <3859395+fubuloubu@users.noreply.github.com>\r\n\r\n* docs: add immutable usage docs\r\n\r\n* fix: allocate memory of immutable in constructor\r\n\r\n* fix: disallow multiple assignments to immutable\r\n\r\n* test: multiple assignments blocked\r\n\r\n* fix: set immutable data location to CODE\r\n\r\n* fix: verify immutable is given a single argument\r\n\r\n* fix: if stmt use bool type as condition\r\n\r\n* fix: make immutable data size a cached prop on global ctx\r\n\r\n* fix: swap 'lll' arguments, offset is first code is second\r\n\r\n* fix: remove _metadata dict on LLLnode for immutables\r\n\r\nInstead when parsing the immutable modify the variable record in the global ctx\r\n\r\n* fix: mypy typing error\r\n\r\n* Update vyper/semantics/types/indexable/sequence.py\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>\r\n\r\n* Update vyper/semantics/types/bases.py\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>\r\n\r\n* fix: use cached property from vyper.utils\r\n\r\n* chore: leave todo, come back and resolve immutable offsets at compile time\r\n\r\n* update a comment about lll macro\r\n\r\nCo-authored-by: El De-dog-lo <3859395+fubuloubu@users.noreply.github.com>\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>",
      "files_changed": [
        "docs/scoping-and-declarations.rst",
        "tests/compiler/LLL/test_compile_lll.py",
        "tests/grammar/vyper.lark",
        "tests/parser/features/test_immutable.py",
        "tests/parser/syntax/test_immutables.py",
        "vyper/ast/signatures/function_signature.py",
        "vyper/compiler/utils.py",
        "vyper/lll/compile_lll.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/global_context.py",
        "vyper/old_codegen/parser.py",
        "vyper/old_codegen/types/types.py",
        "vyper/semantics/environment.py",
        "vyper/semantics/namespace.py",
        "vyper/semantics/types/bases.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/indexable/mapping.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/semantics/types/user/interface.py",
        "vyper/semantics/types/user/struct.py",
        "vyper/semantics/types/utils.py",
        "vyper/semantics/types/value/address.py",
        "vyper/semantics/types/value/array_value.py",
        "vyper/semantics/validation/data_positions.py",
        "vyper/semantics/validation/local.py",
        "vyper/semantics/validation/module.py"
      ],
      "insertions": 496,
      "deletions": 70,
      "original_hash": "017ef0eb499bc4f18c2bbf488a0fab0408894164",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "ce00701955d2af0cafc5d7b8b503e698ffa060ea",
      "author": "Ben Hauser",
      "author_email": "ben@hauser.id",
      "committed_date": "2021-04-14T02:21:22+04:00",
      "message": "fix: int256 safemath",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 73,
      "deletions": 9,
      "original_hash": "ce00701955d2af0cafc5d7b8b503e698ffa060ea",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "27cec1b524072018f8866c18e1a95b010b7400ed",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-02-15T08:08:36-08:00",
      "message": "feat: implement append and pop for dynarray (#2615)\n\nadd MemberFunction to type system\r\nthread append/pop through codegen\r\nfix a name shadow in generated LLL\r\n\r\nCo-authored-by: Gary Tse <tse.rong.gary@gmail.com>",
      "files_changed": [
        "tests/parser/types/test_dynamic_array.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/stmt.py",
        "vyper/lll/optimizer.py",
        "vyper/semantics/types/bases.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/semantics/types/user/interface.py",
        "vyper/semantics/types/user/struct.py",
        "vyper/semantics/types/value/address.py",
        "vyper/semantics/validation/annotation.py",
        "vyper/semantics/validation/local.py",
        "vyper/semantics/validation/utils.py"
      ],
      "insertions": 400,
      "deletions": 46,
      "original_hash": "27cec1b524072018f8866c18e1a95b010b7400ed",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "a125a8805943d974cf5ca9736ff8ae508e777ebd",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-18T18:46:28+00:00",
      "message": "feat: generalize conversion rules (#2694)\n\nThis commit refactors and changes conversion semantics to be in line\r\nwith VIP 2507. The main changes from existing behavior are:\r\n\r\n- fewer allowed conversions with address (eg. decimal/address unallowed)\r\n- decimals are bitcasted with bytes\r\n- fixes involving sign extension\r\n\r\nBy generalizing the conversion rules to not use hardcoded integer/bytes\r\ntypes, this commit lays some groundwork for more integer/bytes types\r\nsince we will not have to add a case for every single type.\r\n\r\nThis commit is a first pass; the tests should be consolidated and\r\nrefactored before release, and some cases involving conversion to bytes\r\nhave not been added yet. Also, the logic should probably be cleaned up\r\nso that it is easier to validate/reason about.",
      "files_changed": [
        "tests/parser/functions/test_convert_to_address.py",
        "tests/parser/functions/test_convert_to_bool.py",
        "tests/parser/functions/test_convert_to_bytes32.py",
        "tests/parser/functions/test_convert_to_decimal.py",
        "tests/parser/functions/test_convert_to_int128.py",
        "tests/parser/functions/test_convert_to_int256.py",
        "tests/parser/functions/test_convert_to_uint256.py",
        "tests/parser/functions/test_ecrecover.py",
        "tests/parser/functions/test_unsafe_math.py",
        "tests/parser/syntax/test_functions_call.py",
        "tests/parser/types/numbers/test_uint256.py",
        "vyper/builtin_functions/convert.py",
        "vyper/builtin_functions/functions.py",
        "vyper/builtin_functions/signatures.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/types/types.py",
        "vyper/lll/optimizer.py",
        "vyper/semantics/types/abstract.py",
        "vyper/semantics/types/value/bytes_fixed.py",
        "vyper/utils.py"
      ],
      "insertions": 560,
      "deletions": 805,
      "original_hash": "a125a8805943d974cf5ca9736ff8ae508e777ebd",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "1751660515af788848edba1f08a227bafd423bee",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-05-23T18:43:02+02:00",
      "message": "Merge master.",
      "files_changed": [
        "docs/index.rst",
        "examples/auctions/simple_open_auction.v.py",
        "examples/market_maker/on_chain_market_maker.v.py",
        "examples/safe_remote_purchase/safe_remote_purchase.v.py",
        "examples/stock/company.v.py",
        "tests/examples/company/test_company.py",
        "vyper/functions/functions.py",
        "vyper/parser/expr.py",
        "vyper/parser/parser.py",
        "vyper/parser/stmt.py",
        "vyper/premade_contracts.py",
        "vyper/types/convert.py",
        "vyper/types/types.py",
        "vyper/utils.py"
      ],
      "insertions": 109,
      "deletions": 77,
      "original_hash": "1751660515af788848edba1f08a227bafd423bee",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "e0286d5a54f925ea8a57805d2034a4904d502a8e",
      "author": "Jacob Rockland",
      "author_email": "jakerockland@gmail.com",
      "committed_date": "2019-06-28T00:42:23-06:00",
      "message": "Allow equality checks between string types",
      "files_changed": [
        "tests/parser/syntax/test_string.py",
        "tests/parser/types/test_bytes.py",
        "tests/parser/types/test_string.py",
        "vyper/functions/functions.py",
        "vyper/parser/expr.py",
        "vyper/parser/keccak256_helper.py"
      ],
      "insertions": 182,
      "deletions": 109,
      "original_hash": "e0286d5a54f925ea8a57805d2034a4904d502a8e",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "006703d9db95f980bafcb90b10b4563cb1ca1636",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2019-02-25T19:02:50+02:00",
      "message": "Add strict ContracType(<address>) definition to align with VIP #1251.",
      "files_changed": [
        "tests/compiler/test_pre_parser.py",
        "tests/parser/features/external_contracts/test_erc20_abi.py",
        "tests/parser/features/external_contracts/test_external_contract_calls.py",
        "tests/parser/features/external_contracts/test_modifiable_external_contract_calls.py",
        "tests/parser/functions/test_interfaces.py",
        "vyper/parser/expr.py",
        "vyper/parser/global_context.py",
        "vyper/parser/parser_utils.py",
        "vyper/parser/stmt.py"
      ],
      "insertions": 91,
      "deletions": 65,
      "original_hash": "006703d9db95f980bafcb90b10b4563cb1ca1636",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "d03a80831579db74f825c0a2694947b3b77d803f",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-04T14:55:20-08:00",
      "message": "feat: add unsafe arithmetic ops (#2629)\n\nadd unsafe add/sub/mul/div builtins which don't perform safemath checks. \r\nfor int types that are smaller than 256 bits, they perform wrapping      \r\narithmetic, e.g. uint8 * uint8 is a regular MUL followed by mod 2**8.    \r\nunsafe ops for decimals were not added yet since the wrapping logic is a\r\nbit more complicated.",
      "files_changed": [
        "tests/parser/functions/test_unsafe_math.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/expr.py",
        "vyper/utils.py"
      ],
      "insertions": 161,
      "deletions": 4,
      "original_hash": "d03a80831579db74f825c0a2694947b3b77d803f",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "e5960271703737131746f3d8cb064078608fc8ef",
      "author": "Edward Amor",
      "author_email": "edward.amor3@gmail.com",
      "committed_date": "2021-10-21T17:15:27-07:00",
      "message": "feat: add uint8 type (#2477)\n\n* feat: add Uint8{Definition,Primitive} classes\r\n\r\nStart of adding uint8 type to vyper\r\n\r\n* feat: add uint8 to Numeric Abstract classes\r\n\r\n* fix: add uint8 to BASE_TYPES constant in utils.py\r\n\r\n* fix: handle uint8 in `abi_type_of` fn\r\n\r\n* fix: handle uint8 in `canonicalize_type` fn\r\n\r\n* fix: handle uint8 in `clamp_basetype` fn\r\n\r\n* fix: add uint8 to `is_numeric_type` fn\r\n\r\n* fix: handle BinOp add/sub for uint8\r\n\r\n* feat: handle uint8 in parse_BinOp\r\n\r\n* fix: add uint8 to SizeLimits class + `in_bounds` classmethod\r\n\r\n* test: uint8 operations\r\n\r\nCopied over from the uint256 test\r\n\r\n* feat: handle uint8 in convert.py\r\n\r\n* fix: handle uint8 in byte_array_to_num\r\n\r\n* feat: add to_uint8 in convert.py\r\n\r\n* test: uint8 convert clamps\r\n\r\n* test: uint8 safe exponentiation\r\n\r\n* fix: imports in vyper.semantics.types.value\r\n\r\n* make int_clamp private to parser_utils\r\n\r\nfor type safety users of the module should use clamp_basetype instead.\r\n\r\n* refactor byte_array_to_num\r\n\r\n* fix minor issues with convert refactor\r\n\r\n* test: add uint8 tests to tests/parser/features/test_clampers.py\r\n\r\n* fix: increase range on clampers uint8 test\r\n\r\n* feat: add builtin interface ERC20Detailed\r\n\r\n* fix: ERC20 example use uint8 for decimals\r\n\r\n* docs: document uint8 type\r\n\r\n* chore: leave notes about test_convert_to_* tests\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>",
      "files_changed": [
        "docs/types.rst",
        "examples/tokens/ERC20.vy",
        "quicktest.sh",
        "tests/compiler/LLL/test_optimize_lll.py",
        "tests/parser/features/test_clampers.py",
        "tests/parser/functions/test_convert_to_uint256.py",
        "tests/parser/types/numbers/test_uint8.py",
        "vyper/builtin_functions/convert.py",
        "vyper/builtin_interfaces/ERC20Detailed.py",
        "vyper/lll/compile_lll.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/types/types.py",
        "vyper/semantics/types/abstract.py",
        "vyper/semantics/types/value/numeric.py",
        "vyper/utils.py"
      ],
      "insertions": 531,
      "deletions": 137,
      "original_hash": "e5960271703737131746f3d8cb064078608fc8ef",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "863abc7222c57c4004d5a226a1bcf6936e60be37",
      "author": "Ben Hauser",
      "author_email": "ben@hauser.id",
      "committed_date": "2020-06-24T18:47:08-04:00",
      "message": "refactor: rebuild Expr",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 122,
      "deletions": 311,
      "original_hash": "863abc7222c57c4004d5a226a1bcf6936e60be37",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "18d9e91a9b15f3a53309dd0230caa5e90facf7e8",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-02-09T23:26:37+00:00",
      "message": "chore: refactor dynamic arrays code (#2633)\n\nThis commit fixes some performance bugs in dynamic arrays.         \r\n                                \r\nIt uses a loop to copy dynamic arrays when the child type is also  \r\ndynamic (can take less space than is allocated for it).            \r\n                                \r\nIt also moves the loop variable in the `repeat` macro to the stack,\r\nreducing memory traffic in loops.\r\n                                \r\nIt also fixes a bug in the `in` operator where side effects in the LHS\r\ncan get repeatedly evaluated.",
      "files_changed": [
        "tests/ast/nodes/test_evaluate_compare.py",
        "tests/compiler/LLL/test_repeat.py",
        "tests/parser/types/numbers/test_constants.py",
        "tests/parser/types/test_dynamic_array.py",
        "vyper/ast/nodes.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/abi_encoder.py",
        "vyper/codegen/context.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/external_call.py",
        "vyper/codegen/function_definitions/external_function.py",
        "vyper/codegen/lll_node.py",
        "vyper/codegen/module.py",
        "vyper/codegen/return_.py",
        "vyper/codegen/self_call.py",
        "vyper/codegen/stmt.py",
        "vyper/codegen/types/check.py",
        "vyper/codegen/types/types.py",
        "vyper/lll/README.md",
        "vyper/lll/compile_lll.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/utils.py"
      ],
      "insertions": 483,
      "deletions": 359,
      "original_hash": "18d9e91a9b15f3a53309dd0230caa5e90facf7e8",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "7a9ac136492c61b5eb614c94291a9fec36805bd0",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2017-10-25T13:22:15+02:00",
      "message": "Adds support for comparing with a list from storage.",
      "files_changed": [
        "tests/parser/features/iteration/test_range_in.py",
        "viper/parser/expr.py"
      ],
      "insertions": 29,
      "deletions": 7,
      "original_hash": "7a9ac136492c61b5eb614c94291a9fec36805bd0",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "9a732d8a1b3dcbd36727d68964485d5e0187d98d",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2018-11-27T16:18:03-08:00",
      "message": "Implement struct constructors, basic typechecking",
      "files_changed": [
        "vyper/parser/expr.py",
        "vyper/parser/global_context.py",
        "vyper/parser/parser_utils.py",
        "vyper/parser/stmt.py",
        "vyper/types/types.py"
      ],
      "insertions": 44,
      "deletions": 2,
      "original_hash": "9a732d8a1b3dcbd36727d68964485d5e0187d98d",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "b1c8500099820da3696db4012df1cd02547518e1",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-12-18T07:10:00+02:00",
      "message": "Add support for checking nested lists.",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 17,
      "deletions": 4,
      "original_hash": "b1c8500099820da3696db4012df1cd02547518e1",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "72e36c09fe9cf5865deb47ccb8d7368688aa428a",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-05-16T17:11:52+02:00",
      "message": "Merge master.",
      "files_changed": [
        "docs/testing-deploying-contracts.rst",
        "tests/conftest.py",
        "tests/examples/voting/test_ballot.py",
        "tests/parser/features/external_contracts/test_external_contract_calls.py",
        "tests/parser/features/test_logging.py",
        "tests/parser/types/test_bytes.py",
        "vyper/functions/signature.py",
        "vyper/parser/expr.py",
        "vyper/parser/parser.py",
        "vyper/parser/parser_utils.py"
      ],
      "insertions": 270,
      "deletions": 27,
      "original_hash": "72e36c09fe9cf5865deb47ccb8d7368688aa428a",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "e4c08baf55540815fe8f23b9c8fc9c67206916d5",
      "author": "Bryant Eisenbach",
      "author_email": "fubuloubu@gmail.com",
      "committed_date": "2020-06-24T19:12:00-04:00",
      "message": "lint: Black EVERYTHING",
      "files_changed": [
        "docs/conf.py",
        "setup.py",
        "tests/ast/nodes/test_evaluate_binop_decimal.py",
        "tests/ast/nodes/test_evaluate_binop_int.py",
        "tests/ast/nodes/test_evaluate_boolop.py",
        "tests/ast/test_natspec.py",
        "tests/ast/test_pre_parser.py",
        "tests/base_conftest.py",
        "tests/cli/vyper_compile/test_compile_files.py",
        "tests/cli/vyper_compile/test_import_paths.py",
        "tests/cli/vyper_compile/test_parse_args.py",
        "tests/cli/vyper_json/test_compile_from_input_dict.py",
        "tests/cli/vyper_json/test_compile_json.py",
        "tests/cli/vyper_json/test_get_contracts.py",
        "tests/cli/vyper_json/test_get_settings.py",
        "tests/cli/vyper_json/test_interfaces.py",
        "tests/cli/vyper_json/test_output_dict.py",
        "tests/cli/vyper_json/test_output_selection.py",
        "tests/cli/vyper_json/test_parse_args_vyperjson.py",
        "tests/compiler/LLL/test_compile_lll.py",
        "tests/compiler/LLL/test_optimize_lll.py",
        "tests/compiler/LLL/test_repeat.py",
        "tests/compiler/LLL/test_with.py",
        "tests/compiler/test_bytecode_runtime.py",
        "tests/compiler/test_calldatacopy.py",
        "tests/compiler/test_clamps.py",
        "tests/compiler/test_opcodes.py",
        "tests/compiler/test_pre_parser.py",
        "tests/compiler/test_sha3_32.py",
        "tests/compiler/test_source_map.py",
        "tests/conftest.py",
        "tests/examples/auctions/test_blind_auction.py",
        "tests/examples/auctions/test_simple_open_auction.py",
        "tests/examples/company/test_company.py",
        "tests/examples/crowdfund/test_crowdfund_example.py",
        "tests/examples/factory/test_factory.py",
        "tests/examples/market_maker/test_on_chain_market_maker.py",
        "tests/examples/name_registry/test_name_registry.py",
        "tests/examples/safe_remote_purchase/test_safe_remote_purchase.py",
        "tests/examples/storage/test_advanced_storage.py",
        "tests/examples/storage/test_storage.py",
        "tests/examples/tokens/test_erc20.py",
        "tests/examples/tokens/test_erc721.py",
        "tests/examples/voting/test_ballot.py",
        "tests/examples/wallet/test_wallet.py",
        "tests/functions/folding/test_addmod_mulmod.py",
        "tests/functions/folding/test_floor_ceil.py",
        "tests/functions/folding/test_fold_as_wei_value.py",
        "tests/functions/folding/test_keccak_sha.py",
        "tests/functions/folding/test_min_max.py",
        "tests/grammar/conftest.py",
        "tests/grammar/test_grammar.py",
        "tests/parser/ast_utils/test_ast_dict.py",
        "tests/parser/exceptions/test_argument_exception.py",
        "tests/parser/exceptions/test_call_violation.py",
        "tests/parser/exceptions/test_constancy_exception.py",
        "tests/parser/exceptions/test_function_declaration_exception.py",
        "tests/parser/exceptions/test_invalid_literal_exception.py",
        "tests/parser/exceptions/test_invalid_operation.py",
        "tests/parser/exceptions/test_invalid_payable.py",
        "tests/parser/exceptions/test_invalid_reference.py",
        "tests/parser/exceptions/test_invalid_type_exception.py",
        "tests/parser/exceptions/test_namespace_collision.py",
        "tests/parser/exceptions/test_overflow_exception.py",
        "tests/parser/exceptions/test_structure_exception.py",
        "tests/parser/exceptions/test_syntax_exception.py",
        "tests/parser/exceptions/test_type_mismatch_exception.py",
        "tests/parser/exceptions/test_undeclared_definition.py",
        "tests/parser/exceptions/test_variable_declaration_exception.py",
        "tests/parser/exceptions/test_vyper_exception_pos.py",
        "tests/parser/features/arithmetic/test_division.py",
        "tests/parser/features/arithmetic/test_modulo.py",
        "tests/parser/features/decorators/test_constant.py",
        "tests/parser/features/decorators/test_nonreentrant.py",
        "tests/parser/features/decorators/test_private.py",
        "tests/parser/features/decorators/test_public.py",
        "tests/parser/features/external_contracts/test_erc20_abi.py",
        "tests/parser/features/external_contracts/test_external_contract_calls.py",
        "tests/parser/features/external_contracts/test_modifiable_external_contract_calls.py",
        "tests/parser/features/external_contracts/test_self_call_struct.py",
        "tests/parser/features/iteration/test_break.py",
        "tests/parser/features/iteration/test_for_in_list.py",
        "tests/parser/features/iteration/test_range_in.py",
        "tests/parser/features/iteration/test_repeater.py",
        "tests/parser/features/test_assert.py",
        "tests/parser/features/test_assert_unreachable.py",
        "tests/parser/features/test_assignment.py",
        "tests/parser/features/test_bytes_map_keys.py",
        "tests/parser/features/test_comments.py",
        "tests/parser/features/test_conditionals.py",
        "tests/parser/features/test_constructor.py",
        "tests/parser/features/test_gas.py",
        "tests/parser/features/test_init.py",
        "tests/parser/features/test_internal_call.py",
        "tests/parser/features/test_logging.py",
        "tests/parser/features/test_logging_bytes_extended.py",
        "tests/parser/features/test_logging_from_call.py",
        "tests/parser/features/test_packing.py",
        "tests/parser/functions/test_abi.py",
        "tests/parser/functions/test_bitwise.py",
        "tests/parser/functions/test_block_number.py",
        "tests/parser/functions/test_ceil.py",
        "tests/parser/functions/test_concat.py",
        "tests/parser/functions/test_convert_to_address.py",
        "tests/parser/functions/test_convert_to_bool.py",
        "tests/parser/functions/test_convert_to_bytes32.py",
        "tests/parser/functions/test_convert_to_decimal.py",
        "tests/parser/functions/test_convert_to_int128.py",
        "tests/parser/functions/test_convert_to_uint256.py",
        "tests/parser/functions/test_create_with_code_of.py",
        "tests/parser/functions/test_default_function.py",
        "tests/parser/functions/test_default_parameters.py",
        "tests/parser/functions/test_ec.py",
        "tests/parser/functions/test_ecrecover.py",
        "tests/parser/functions/test_empty.py",
        "tests/parser/functions/test_extract32.py",
        "tests/parser/functions/test_floor.py",
        "tests/parser/functions/test_interfaces.py",
        "tests/parser/functions/test_keccak256.py",
        "tests/parser/functions/test_length.py",
        "tests/parser/functions/test_method_id.py",
        "tests/parser/functions/test_minmax.py",
        "tests/parser/functions/test_raw_call.py",
        "tests/parser/functions/test_return.py",
        "tests/parser/functions/test_return_struct.py",
        "tests/parser/functions/test_return_tuple.py",
        "tests/parser/functions/test_send.py",
        "tests/parser/functions/test_slice.py",
        "tests/parser/globals/test_globals.py",
        "tests/parser/globals/test_setters.py",
        "tests/parser/integration/test_basics.py",
        "tests/parser/integration/test_crowdfund.py",
        "tests/parser/integration/test_escrow.py",
        "tests/parser/parser_utils/test_annotate_and_optimize_ast.py",
        "tests/parser/syntax/test_ann_assign.py",
        "tests/parser/syntax/test_as_uint256.py",
        "tests/parser/syntax/test_as_wei_value.py",
        "tests/parser/syntax/test_block.py",
        "tests/parser/syntax/test_blockscope.py",
        "tests/parser/syntax/test_bool.py",
        "tests/parser/syntax/test_bool_ops.py",
        "tests/parser/syntax/test_byte_string.py",
        "tests/parser/syntax/test_bytes.py",
        "tests/parser/syntax/test_chainid.py",
        "tests/parser/syntax/test_code_size.py",
        "tests/parser/syntax/test_codehash.py",
        "tests/parser/syntax/test_concat.py",
        "tests/parser/syntax/test_conditionals.py",
        "tests/parser/syntax/test_constants.py",
        "tests/parser/syntax/test_create_with_code_of.py",
        "tests/parser/syntax/test_extract32.py",
        "tests/parser/syntax/test_for_range.py",
        "tests/parser/syntax/test_functions_call.py",
        "tests/parser/syntax/test_interfaces.py",
        "tests/parser/syntax/test_invalids.py",
        "tests/parser/syntax/test_keccak256.py",
        "tests/parser/syntax/test_len.py",
        "tests/parser/syntax/test_list.py",
        "tests/parser/syntax/test_logging.py",
        "tests/parser/syntax/test_minmax.py",
        "tests/parser/syntax/test_nested_list.py",
        "tests/parser/syntax/test_no_none.py",
        "tests/parser/syntax/test_public.py",
        "tests/parser/syntax/test_raw_call.py",
        "tests/parser/syntax/test_return_tuple.py",
        "tests/parser/syntax/test_self_balance.py",
        "tests/parser/syntax/test_selfdestruct.py",
        "tests/parser/syntax/test_send.py",
        "tests/parser/syntax/test_slice.py",
        "tests/parser/syntax/test_string.py",
        "tests/parser/syntax/test_structs.py",
        "tests/parser/syntax/test_tuple_assign.py",
        "tests/parser/syntax/test_unbalanced_return.py",
        "tests/parser/syntax/utils/test_event_names.py",
        "tests/parser/syntax/utils/test_variable_names.py",
        "tests/parser/types/numbers/test_constants.py",
        "tests/parser/types/numbers/test_decimals.py",
        "tests/parser/types/numbers/test_int128.py",
        "tests/parser/types/numbers/test_sqrt.py",
        "tests/parser/types/numbers/test_uint256.py",
        "tests/parser/types/test_bytes.py",
        "tests/parser/types/test_bytes_literal.py",
        "tests/parser/types/test_bytes_zero_padding.py",
        "tests/parser/types/test_identifier_naming.py",
        "tests/parser/types/test_lists.py",
        "tests/parser/types/test_node_types.py",
        "tests/parser/types/test_string.py",
        "tests/parser/types/test_string_literal.py",
        "tests/parser/types/value/test_as_wei_value.py",
        "tests/signatures/test_invalid_function_decorators.py",
        "tests/signatures/test_method_id_conflicts.py",
        "tests/test_utils.py",
        "vyper/__init__.py",
        "vyper/ast/__init__.py",
        "vyper/ast/annotation.py",
        "vyper/ast/folding.py",
        "vyper/ast/natspec.py",
        "vyper/ast/nodes.py",
        "vyper/ast/nodes.pyi",
        "vyper/ast/pre_parser.py",
        "vyper/ast/validation.py",
        "vyper/cli/vyper_compile.py",
        "vyper/cli/vyper_json.py",
        "vyper/cli/vyper_lll.py",
        "vyper/cli/vyper_serve.py",
        "vyper/codegen/abi.py",
        "vyper/codegen/return_.py",
        "vyper/compile_lll.py",
        "vyper/compiler/__init__.py",
        "vyper/compiler/output.py",
        "vyper/compiler/phases.py",
        "vyper/compiler/utils.py",
        "vyper/context/types/function.py",
        "vyper/functions/convert.py",
        "vyper/functions/functions.py",
        "vyper/functions/signatures.py",
        "vyper/functions/utils.py",
        "vyper/opcodes.py",
        "vyper/optimizer.py",
        "vyper/parser/arg_clamps.py",
        "vyper/parser/constants.py",
        "vyper/parser/context.py",
        "vyper/parser/events.py",
        "vyper/parser/expr.py",
        "vyper/parser/external_call.py",
        "vyper/parser/function_definitions/parse_function.py",
        "vyper/parser/function_definitions/parse_private_function.py",
        "vyper/parser/function_definitions/parse_public_function.py",
        "vyper/parser/function_definitions/utils.py",
        "vyper/parser/global_context.py",
        "vyper/parser/keccak256_helper.py",
        "vyper/parser/lll_node.py",
        "vyper/parser/memory_allocator.py",
        "vyper/parser/parser.py",
        "vyper/parser/parser_utils.py",
        "vyper/parser/s_expressions.py",
        "vyper/parser/self_call.py",
        "vyper/parser/stmt.py",
        "vyper/settings.py",
        "vyper/signatures/event_signature.py",
        "vyper/signatures/function_signature.py",
        "vyper/signatures/interface.py",
        "vyper/signatures/sig_utils.py",
        "vyper/types/check.py",
        "vyper/types/types.py",
        "vyper/utils.py"
      ],
      "insertions": 6662,
      "deletions": 6471,
      "original_hash": "e4c08baf55540815fe8f23b9c8fc9c67206916d5",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "ef1e6e4f48647085694047fb5a5993a57305a0e3",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-01-06T14:18:50-08:00",
      "message": "feat: implement dynamic arrays (#2556)\n\nThis commit implements Solidity-ABI-compatible dynamic arrays in vyper.\r\n\r\nDynamic arrays have the type `DynArray[<type>, <maxlen>]`. They are\r\nimplemented similarly to bytestrings, with a single length word followed\r\nby the data, <len> <data...>.\r\n\r\nIt also adds some code to clarify between the sizes of objects\r\nwhen they are in memory vs in storage.\r\n\r\nThis commit also refactors a lot of code dealing with encoding and byte\r\ncopying. Byte copying is cheaper now since previously the logic was\r\n```\r\nfor i in range(maxlen // 32):\r\n    if i > len:\r\n        break\r\n    sstore(dst + i, mload(src + 32*i))\r\n```\r\n\r\nThis was necessary because the `repeat` opcode in LLL requires a max\r\nbound. Now, we have repeat(len, maxlen), which still enforces the max\r\nbound but breaks once it hits the minimum of `len` and `maxlen`. Now the\r\nbyte copier loop has the logic of:\r\n\r\n```\r\nfor i in range( min(len, maxlen) ):\r\n    sstore(dst + i, mload(src + 32*i))\r\n```\r\n\r\nIt also adds a method to the LLLnode API, `cache_when_complex`. This\r\nabstracts the logic for checking when an LLL expression needs to be\r\ncached using a `with` expression. This was used to simplify the ABI\r\nencoder and several routines related to copying (including\r\n`make_setter`).",
      "files_changed": [
        "tests/functional/codegen/test_abi_encode.py",
        "tests/functional/codegen/test_struct_return.py",
        "tests/functional/context/validation/test_potential_types.py",
        "tests/grammar/vyper.lark",
        "tests/parser/features/decorators/test_nonreentrant.py",
        "tests/parser/features/external_contracts/test_external_contract_calls.py",
        "tests/parser/features/external_contracts/test_self_call_struct.py",
        "tests/parser/features/test_clampers.py",
        "tests/parser/functions/test_empty.py",
        "tests/parser/syntax/test_nested_list.py",
        "tests/parser/types/test_dynamic_array.py",
        "tests/parser/types/test_node_types.py",
        "vyper/ast/signatures/function_signature.py",
        "vyper/builtin_functions/functions.py",
        "vyper/builtin_functions/signatures.py",
        "vyper/lll/compile_lll.py",
        "vyper/lll/optimizer.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/context.py",
        "vyper/old_codegen/events.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/external_call.py",
        "vyper/old_codegen/function_definitions/external_function.py",
        "vyper/old_codegen/global_context.py",
        "vyper/old_codegen/lll_node.py",
        "vyper/old_codegen/memory_allocator.py",
        "vyper/old_codegen/parser.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/return_.py",
        "vyper/old_codegen/self_call.py",
        "vyper/old_codegen/stmt.py",
        "vyper/old_codegen/types/check.py",
        "vyper/old_codegen/types/types.py",
        "vyper/semantics/types/__init__.py",
        "vyper/semantics/types/bases.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/semantics/types/user/event.py",
        "vyper/semantics/types/user/interface.py",
        "vyper/semantics/types/user/struct.py",
        "vyper/semantics/types/value/array_value.py",
        "vyper/semantics/types/value/numeric.py",
        "vyper/semantics/validation/annotation.py",
        "vyper/semantics/validation/utils.py"
      ],
      "insertions": 1753,
      "deletions": 817,
      "original_hash": "ef1e6e4f48647085694047fb5a5993a57305a0e3",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "6ca3baa60716bf3aafee604705b6adfce84cfa56",
      "author": "iamdefinitelyahuman",
      "author_email": "ben.hauser@hyperlink.technology",
      "committed_date": "2019-12-29T01:21:42+02:00",
      "message": "explicitely disallow decimal exponentiation",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 6,
      "deletions": 0,
      "original_hash": "6ca3baa60716bf3aafee604705b6adfce84cfa56",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "c3bfd1733b4ef686374c80e802b2944b3de97b30",
      "author": "Ben Hauser",
      "author_email": "ben@hauser.id",
      "committed_date": "2020-09-29T15:09:34+03:00",
      "message": "refactor: only apply non-zero clamp when r is not constant",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 18,
      "deletions": 5,
      "original_hash": "c3bfd1733b4ef686374c80e802b2944b3de97b30",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "5b398b41010878d090c8b57427e77b72393ec12f",
      "author": "Jacob Rockland",
      "author_email": "jakerockland@gmail.com",
      "committed_date": "2018-11-22T00:53:29-07:00",
      "message": "# This is a combination of 2 commits.\n# This is the 1st commit message:\n\nSupport BoolOps for > 2 arguments\n\n# This is the commit message #2:\n\nClean up commented out code",
      "files_changed": [
        "tests/parser/syntax/test_bool_ops.py",
        "vyper/parser/expr.py"
      ],
      "insertions": 58,
      "deletions": 10,
      "original_hash": "5b398b41010878d090c8b57427e77b72393ec12f",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "2c73f8352635c0a433423a5b94740de1a118e508",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-04-02T08:30:04-07:00",
      "message": "Merge pull request from GHSA-7vrm-3jc8-5wwm\n\n* add more tests for string comparison\n\nexplicitly test the codepath with <= 32 bytes\n\n* refactor keccak256 helper a bit\n\n* fix bytestring equality\n\nexisting bytestring equality checks do not check length equality or for\ndirty bytes.",
      "files_changed": [
        "tests/parser/functions/test_slice.py",
        "tests/parser/types/test_string.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ],
      "insertions": 159,
      "deletions": 104,
      "original_hash": "2c73f8352635c0a433423a5b94740de1a118e508",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "f569d41bacbe17d671b8ad6382cb936de8b64c9e",
      "author": "Ben Hauser",
      "author_email": "35276322+iamdefinitelyahuman@users.noreply.github.com",
      "committed_date": "2020-07-01T00:39:35+04:00",
      "message": "fix: handle negative value edge case\n\nCo-authored-by: Bryant Eisenbach <3859395+fubuloubu@users.noreply.github.com>",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 16,
      "deletions": 7,
      "original_hash": "f569d41bacbe17d671b8ad6382cb936de8b64c9e",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "26aefafc12424996f07434fb97816195c57ecc56",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-08-02T21:51:13+00:00",
      "message": "refactor events to use abi_encode\n\n- use abi_encode for the data\n- use keccak256_helper for non-basetype topics\n- block non-value types in indexes\n\nnote: a test for blocked functionality has been removed because the functionality now works",
      "files_changed": [
        "tests/parser/exceptions/test_structure_exception.py",
        "tests/parser/features/test_logging.py",
        "vyper/builtin_functions/functions.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/events.py",
        "vyper/old_codegen/keccak256_helper.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/stmt.py",
        "vyper/semantics/types/user/event.py"
      ],
      "insertions": 161,
      "deletions": 347,
      "original_hash": "26aefafc12424996f07434fb97816195c57ecc56",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "aefb44d3371c3b61e88e873326870e536a76d2f8",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2017-10-25T15:37:33+02:00",
      "message": "Adds support for comparing a list created in the comparator statement.",
      "files_changed": [
        "tests/parser/features/iteration/test_range_in.py",
        "viper/parser/expr.py"
      ],
      "insertions": 54,
      "deletions": 24,
      "original_hash": "aefb44d3371c3b61e88e873326870e536a76d2f8",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "0cabdb1308f3f0cb2e0759eee8720d4c851ee90b",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-08-07T23:10:52+02:00",
      "message": "Add _get_sig for looking up function signatures.",
      "files_changed": [
        "tests/parser/functions/test_default_parameters.py",
        "vyper/parser/expr.py",
        "vyper/parser/parser.py",
        "vyper/signatures/function_signature.py"
      ],
      "insertions": 81,
      "deletions": 14,
      "original_hash": "0cabdb1308f3f0cb2e0759eee8720d4c851ee90b",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "833cb8ffb3599ddb6e4583672641b71fd40e369b",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2019-01-29T18:16:23+02:00",
      "message": "Add support for returning a string literal.",
      "files_changed": [
        "tests/parser/syntax/test_byte_string.py",
        "tests/parser/syntax/test_string.py",
        "tests/parser/types/test_bytes_literal.py",
        "tests/parser/types/test_string_literal.py",
        "vyper/parser/expr.py",
        "vyper/parser/parser_utils.py",
        "vyper/parser/stmt.py",
        "vyper/types/types.py"
      ],
      "insertions": 163,
      "deletions": 90,
      "original_hash": "833cb8ffb3599ddb6e4583672641b71fd40e369b",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "5be9283d9f35e663581eab1e797aad4397dc0cfb",
      "author": "Ben Hauser",
      "author_email": "ben@hauser.id",
      "committed_date": "2020-06-30T19:16:36+04:00",
      "message": "feat: add clamps to exponents where one side is a literal",
      "files_changed": [
        "vyper/parser/expr.py"
      ],
      "insertions": 31,
      "deletions": 16,
      "original_hash": "5be9283d9f35e663581eab1e797aad4397dc0cfb",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    },
    {
      "hash": "5b9f68e2b31d9b0563c1ca3ec463044c9cf196fa",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2017-10-24T20:36:27+02:00",
      "message": "Adds basic support for x in range expressions.",
      "files_changed": [
        "viper/parser/expr.py"
      ],
      "insertions": 36,
      "deletions": 2,
      "original_hash": "5b9f68e2b31d9b0563c1ca3ec463044c9cf196fa",
      "malicious_files": [
        "vyper/codegen/expr.py",
        "vyper/codegen/keccak256_helper.py"
      ]
    }
  ]
}