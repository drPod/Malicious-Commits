{
  "Snappier": [
    {
      "hash": "eefe905757743eaa178d292f1a3a7800694cd97e",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2020-10-20T13:56:59-04:00",
      "message": "Support unframed compression/decompression (#12)\n\nMotivation\r\n----------\r\nSome clients may not care about the streaming protocol and want to\r\ncompress or decompress raw blocks. This can be done in a more performant\r\nway by avoiding System.IO.Stream.",
      "files_changed": [
        "Snappier.Benchmarks/CompressAlice.cs",
        "Snappier.Benchmarks/CompressAll.cs",
        "Snappier.Benchmarks/DecompressAlice.cs",
        "Snappier.Benchmarks/DecompressAll.cs",
        "Snappier.Tests/SnappyTests.cs",
        "Snappier/Internal/SnappyDecompressor.cs",
        "Snappier/Internal/SnappyStreamDecompressor.cs",
        "Snappier/Snappy.cs"
      ],
      "insertions": 191,
      "deletions": 53,
      "original_hash": "eefe905757743eaa178d292f1a3a7800694cd97e",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "9b78b48323cb683ced20c379fc90f133bd8e6a17",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2023-02-04T11:00:57-05:00",
      "message": "Preload Pshufb fill pattern Vector128 (#44)",
      "files_changed": [
        "Snappier.Benchmarks/IncrementalCopy.cs",
        "Snappier/Internal/CopyHelpers.cs",
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 166,
      "deletions": 169,
      "original_hash": "9b78b48323cb683ced20c379fc90f133bd8e6a17",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "18def040c271c1b30fd637aced352e01de8ef5e1",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2023-02-07T11:57:13-05:00",
      "message": "Move steps to decompress from scratch to a separate method (#52)\n\nMotivation\r\n----------\r\nThe DecompressAllTags method is overly complicated and the step to\r\ndecompress from scratch is not a hot path. At most it should be hit once\r\nper block when processing a stream and never when processing a block.\r\n\r\nModifications\r\n-------------\r\nMove the logic to decompress from scratch to a separate method. Slightly\r\noptimize the short-circuit logic as well.\r\n\r\nResults\r\n-------\r\nJIT should be able to do a better job of enregistration and preventing\r\nregister spillage. DecompressAllTags also gets a smaller stack size\r\nwhich may reduce cache misses.\r\n\r\nWe're seeing some minor gains decompressing from streams on .NET 6/7.\r\nThe gains are within error margins so hard to confirm, they may be more\r\nsignificant on more constrained systems.\r\n\r\n| Method | Job | Runtime | ReadSize | Mean | Error | StdDev | Median |\r\n|----------- |----------------------------- |-------------------\r\n|--------- |---------:|--------:|--------:|---------:|\r\n| Inline | MediumRun-.NET 6.0 | .NET 6.0 | 16384 | 180.2 us | 1.63 us |\r\n2.40 us | 179.0 us |\r\n| MethodCall | MediumRun-.NET 6.0 | .NET 6.0 | 16384 | 179.6 us | 2.15\r\nus | 2.94 us | 178.5 us |\r\n| Inline | MediumRun-.NET 7.0 | .NET 7.0 | 16384 | 156.0 us | 2.23 us |\r\n3.19 us | 156.7 us |\r\n| MethodCall | MediumRun-.NET 7.0 | .NET 7.0 | 16384 | 155.8 us | 1.55\r\nus | 2.22 us | 155.6 us |\r\n| Inline | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 16384 |\r\n278.1 us | 1.83 us | 2.57 us | 277.3 us |\r\n| MethodCall | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 16384\r\n| 280.3 us | 3.59 us | 5.37 us | 281.4 us |",
      "files_changed": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 96,
      "deletions": 71,
      "original_hash": "18def040c271c1b30fd637aced352e01de8ef5e1",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "4b2c26ed4360215a93a6d3e62eed4bcc9cbb8e23",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2023-02-06T22:59:35-05:00",
      "message": "Switch decompression input and scratch to use ref byte (#50)\n\nMotivation\r\n----------\r\nThis is a step towards code that doesn't require pinning which can help\r\nwith GC when compression/decompression is run a lot. GC will be able to\r\nmove memory even when in the middle of a compression or decompression\r\nrun and update the ref pointers.\r\n\r\nModifications\r\n-------------\r\nSwitch all usages of input, inputEnd, and scratch to be `ref byte`\r\nwithin the decompression logic.\r\n\r\nRedesign so that inputEnd points to the last byte in the input rather\r\nthan just past the end of the input.\r\n\r\nRedesign RefillTag to return information rather than directly\r\nmanipulating the pointer parameters since you can't pass a ref to a ref\r\n(except in .NET 7).\r\n\r\nResults\r\n-------\r\nSmaller code size across all platforms, and a slight gain on modern\r\nframeworks. .NET 4.8 regresses a bit, hopefully we can improve that with\r\ntuning later.\r\n\r\nBenchmarkDotNet=v0.13.4, OS=Windows 11 (10.0.22000.1455/21H2) Intel Core\r\ni7-10850H CPU 2.70GHz, 1 CPU, 12 logical and 6 physical cores .NET\r\nSDK=7.0.102\r\n[Host] : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET 6.0 : .NET 6.0.13 (6.0.1322.58009), X64 RyuJIT AVX2\r\nMediumRun-.NET 7.0 : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET Framework 4.8 : .NET Framework 4.8 (4.8.4515.0), X64\r\nRyuJIT VectorSize=256\r\n\r\nIterationCount=15  LaunchCount=2  WarmupCount=10\r\n\r\n| Method | Job | Runtime | Mean | Error | StdDev | Median | Ratio |\r\nRatioSD | Code Size |\r\n|-------- |----------------------------- |-------------------\r\n|----------:|---------:|---------:|----------:|------:|--------:|----------:|\r\n| Pointer | MediumRun-.NET 6.0 | .NET 6.0 | 103.15 us | 1.167 us | 1.674\r\nus | 102.30 us | 1.00 | 0.00 | 6,034 B |\r\n| Ref | MediumRun-.NET 6.0 | .NET 6.0 | 102.52 us | 0.386 us | 0.516 us\r\n| 102.45 us | 0.99 | 0.02 | 5,784 B |\r\n| | | | | | | | | | |\r\n| Pointer | MediumRun-.NET 7.0 | .NET 7.0 | 91.47 us | 0.698 us | 1.045\r\nus | 91.13 us | 1.00 | 0.00 | 5,197 B |\r\n| Ref | MediumRun-.NET 7.0 | .NET 7.0 | 89.62 us | 1.262 us | 1.888 us |\r\n90.80 us | 0.98 | 0.03 | 4,609 B |\r\n| | | | | | | | | | |\r\n| Pointer | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 104.69\r\nus | 0.138 us | 0.203 us | 104.77 us | 1.00 | 0.00 | 6,213 B |\r\n| Ref | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 116.17 us |\r\n3.613 us | 5.408 us | 117.59 us | 1.11 | 0.05 | 5,846 B |",
      "files_changed": [
        "Snappier/Internal/Constants.cs",
        "Snappier/Internal/Helpers.cs",
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 234,
      "deletions": 196,
      "original_hash": "4b2c26ed4360215a93a6d3e62eed4bcc9cbb8e23",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "a66c6a1c0235a91bc6cdf327fae262f5c8f6b3c2",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2020-10-19T11:07:32-04:00",
      "message": "Put Constants.CharTable on the stack as a Span (#7)\n\nThis avoids some additional overhead pulling in the constant array\r\nwithin a critical loop segment.",
      "files_changed": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 5,
      "deletions": 2,
      "original_hash": "a66c6a1c0235a91bc6cdf327fae262f5c8f6b3c2",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "130b5bafb7f1ffb56e8ca67e545f5235b1affdee",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2023-02-05T17:05:45-05:00",
      "message": "Rewrite decompressor AppendXXX methods to use refs (#48)\n\nMotivation\r\n----------\r\nThis is a step towards code that doesn't require pinning which can help\r\nwith GC when compression/decompression is run a lot. GC will be able to\r\nmove memory even when in the middle of a compression or decompression\r\nrun and update the ref pointers.\r\n\r\nModifications\r\n-------------\r\nRewrite all AppendXXX implementations in SnappyDecompressor to use `ref\r\nbyte` instead of `byte*` and use Unsafe methods to perform pointer\r\narithmetic.\r\n\r\nChange source parameter to CopyBlockUnaligned64/128 to be `in` instead\r\nof `ref` to simplify usage where the source is a `ReadOnlySpan<byte>`.\r\n\r\nResults\r\n-------\r\nWe generally see improved performance as well, except for a small\r\nregression in .NET 6, which appears to be JIT related. However, overall\r\nperformance is still better than it was in the previous version and\r\nhopefully the regression is resolved when we move forward with further\r\nconversions to `ref byte`.\r\n\r\nBenchmarkDotNet=v0.13.4, OS=Windows 11 (10.0.22000.1455/21H2) Intel Core\r\ni7-10850H CPU 2.70GHz, 1 CPU, 12 logical and 6 physical cores .NET\r\nSDK=7.0.102\r\n[Host] : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET 6.0 : .NET 6.0.13 (6.0.1322.58009), X64 RyuJIT AVX2\r\nMediumRun-.NET 7.0 : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET Framework 4.8 : .NET Framework 4.8 (4.8.4515.0), X64\r\nRyuJIT VectorSize=256\r\n\r\nIterationCount=15  LaunchCount=2  WarmupCount=10\r\n\r\n| Method | Job | Runtime | Mean | Error | StdDev | Ratio |\r\n|-------- |----------------------------- |-------------------\r\n|----------:|---------:|---------:|------:|\r\n| Pointer | MediumRun-.NET 6.0 | .NET 6.0 | 102.31 us | 0.196 us | 0.287\r\nus | 1.00 |\r\n| Ref | MediumRun-.NET 6.0 | .NET 6.0 | 105.67 us | 0.509 us | 0.697 us\r\n| 1.03 |\r\n| | | | | | | |\r\n| Pointer | MediumRun-.NET 7.0 | .NET 7.0 | 96.65 us | 0.131 us | 0.193\r\nus | 1.00 |\r\n| Ref | MediumRun-.NET 7.0 | .NET 7.0 | 91.92 us | 0.179 us | 0.262 us |\r\n0.95 |\r\n| | | | | | | |\r\n| Pointer | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 108.61\r\nus | 0.805 us | 1.181 us | 1.00 |\r\n| Ref | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 105.75 us |\r\n0.113 us | 0.155 us | 0.98 |",
      "files_changed": [
        "Snappier.Benchmarks/UnalignedCopy128.cs",
        "Snappier.Benchmarks/UnalignedCopy64.cs",
        "Snappier/Internal/CopyHelpers.cs",
        "Snappier/Internal/SnappyCompressor.cs",
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 79,
      "deletions": 79,
      "original_hash": "130b5bafb7f1ffb56e8ca67e545f5235b1affdee",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "0850d43db2bb3d8215a96f6065dc81b15158741f",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2020-10-18T16:40:02-04:00",
      "message": "Cleanup unchecked keywords using blocks (#4)\n\nThis makes the code more legible and helps to prevent accidentally\r\nforgetting to make an operation unchecked.",
      "files_changed": [
        "Snappier.sln.DotSettings",
        "Snappier/Internal/SnappyCompressor.cs",
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 325,
      "deletions": 315,
      "original_hash": "0850d43db2bb3d8215a96f6065dc81b15158741f",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "d5e8f5d8799857b36c5090789b69f2a524a80f5d",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2020-11-20T16:19:49-05:00",
      "message": "Optimized DecompressToMemory\n\nMotivation\n----------\nThe current approach requires allocation of an extra IMemoryOwner and\nmemory copy to it.\n\nModifications\n-------------\nAdd a method to extract the lookback buffer directly and use it for\nSnappy.DecompressToMemory.",
      "files_changed": [
        "Snappier.Tests/SnappyTests.cs",
        "Snappier/Internal/SlicedMemoryOwner.cs",
        "Snappier/Internal/SnappyDecompressor.cs",
        "Snappier/Snappy.cs"
      ],
      "insertions": 115,
      "deletions": 56,
      "original_hash": "d5e8f5d8799857b36c5090789b69f2a524a80f5d",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "6876d6eb5879d21dd594566fd60772f4e3402804",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2020-11-02T20:26:08-05:00",
      "message": "Don't read past end of scratch buffer (#26)\n\nWhen the incoming input buffer is short, we must make sure that we\r\nproperly set inputLimitMinMaxTagLength to prevent buffer overruns.\r\nOtherwise we'll read past the end of the buffer.\r\n\r\nClose #25",
      "files_changed": [
        "Snappier.Tests/Internal/SnappyDecompressorTests.cs",
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 69,
      "deletions": 2,
      "original_hash": "6876d6eb5879d21dd594566fd60772f4e3402804",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "6fd5ab8dab21e1f658cda6768bfe61ce0325fcb8",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2023-02-06T23:21:05-05:00",
      "message": "Switch decompression buffer and op to use ref byte (#51)\n\nMotivation\r\n----------\r\nEliminate decompression pinning which can help with GC when\r\ncompression/decompression is run a lot. GC will be able to move memory\r\neven when in the middle of a compression or decompression run and update\r\nthe ref pointers.\r\n\r\nModifications\r\n-------------\r\nSwitch all usages of buffer, bufferEnd, and op to be `ref byte`.\r\n\r\nResults\r\n-------\r\nNeutral or a performance improvement across all platforms. This also\r\nfinishes eliminating pinning for decompression.\r\n\r\nBenchmarkDotNet=v0.13.4, OS=Windows 11 (10.0.22000.1455/21H2) Intel Core\r\ni7-10850H CPU 2.70GHz, 1 CPU, 12 logical and 6 physical cores .NET\r\nSDK=7.0.102\r\n[Host] : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET 6.0 : .NET 6.0.13 (6.0.1322.58009), X64 RyuJIT AVX2\r\nMediumRun-.NET 7.0 : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET Framework 4.8 : .NET Framework 4.8 (4.8.4515.0), X64\r\nRyuJIT VectorSize=256\r\n\r\nIterationCount=15  LaunchCount=2  WarmupCount=10\r\n\r\n| Method | Job | Runtime | Mean | Error | StdDev | Median | Ratio |\r\nRatioSD | Code Size |\r\n|-------- |----------------------------- |-------------------\r\n|----------:|---------:|---------:|----------:|------:|--------:|----------:|\r\n| Pointer | MediumRun-.NET 6.0 | .NET 6.0 | 101.02 us | 0.460 us | 0.660\r\nus | 100.74 us | 1.00 | 0.00 | 5,784 B |\r\n| Ref | MediumRun-.NET 6.0 | .NET 6.0 | 95.49 us | 0.446 us | 0.626 us |\r\n95.63 us | 0.95 | 0.00 | 5,836 B |\r\n| | | | | | | | | | |\r\n| Pointer | MediumRun-.NET 7.0 | .NET 7.0 | 86.22 us | 0.749 us | 1.097\r\nus | 85.74 us | 1.00 | 0.00 | 4,609 B |\r\n| Ref | MediumRun-.NET 7.0 | .NET 7.0 | 87.46 us | 1.091 us | 1.634 us |\r\n86.54 us | 1.01 | 0.02 | 4,532 B |\r\n| | | | | | | | | | |\r\n| Pointer | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 105.81\r\nus | 1.126 us | 1.685 us | 104.87 us | 1.00 | 0.00 | 6,015 B |\r\n| Ref | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 98.72 us |\r\n1.483 us | 2.174 us | 99.05 us | 0.93 | 0.03 | 5,918 B |",
      "files_changed": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 183,
      "deletions": 183,
      "original_hash": "6fd5ab8dab21e1f658cda6768bfe61ce0325fcb8",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "55f498c6f1a1d13b4999846b736631f129981718",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2023-02-05T13:01:59-05:00",
      "message": "Switch CopyHelpers to use ref byte instead of byte* (#46)\n\nMotivation\r\n----------\r\nThis is a step towards code that doesn't require pinning which can help\r\nwith GC when compression/decompression is run a lot. GC will be able to\r\nmove memory even when in the middle of a compression or decompression\r\nrun and update the ref pointers.\r\n\r\nModifications\r\n-------------\r\nRewrite all implementations in CopyHelper to use `ref byte` instead of\r\n`byte*` and use Unsafe methods to perform pointer arithmetic.\r\n\r\nEnsure that the output buffer always contains an extra byte at the end\r\nso that `ref byte bufferEnd` will always point to a byte in the array\r\nrather than past the end of the array. This ensures that if the buffer\r\nis moved GC recognizes that bufferEnd points within the array and\r\nupdates it accordingly.\r\n\r\nUpdate to System.Runtime.CompilerServices.Unsafe for .NET Standard to\r\ngain access to Unsafe.SkipInit.\r\n\r\nResults\r\n-------\r\nWe actually see some improved performance under this paradigm. Some of\r\nthis gain is because CopyUnalignedXXX was not consistently inlining due\r\nto the use of stackalloc. However, there was gain even above and beyond\r\nthe inlining improvement.\r\n\r\nThe drop in performance for .NET 4.8 is unclear, but I suspect a\r\nbenchmarking problem because the .NET 4.8 implementation should have\r\nbeen slower than .NET 6/7 in the first place.\r\n\r\n### Benchmark for block decompression of Alice\r\n\r\nBenchmarkDotNet=v0.13.4, OS=Windows 11 (10.0.22000.1455/21H2) Intel Core\r\ni7-10850H CPU 2.70GHz, 1 CPU, 12 logical and 6 physical cores .NET\r\nSDK=7.0.102\r\n[Host] : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET 6.0 : .NET 6.0.13 (6.0.1322.58009), X64 RyuJIT AVX2\r\nMediumRun-.NET 7.0 : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET Framework 4.8 : .NET Framework 4.8 (4.8.4515.0), X64\r\nRyuJIT VectorSize=256\r\n\r\nIterationCount=15  LaunchCount=2  WarmupCount=10\r\n\r\n| Method | Job | Runtime | Mean | Error | StdDev | Median | Ratio |\r\nRatioSD | Code Size |\r\n|-------- |----------------------------- |-------------------\r\n|----------:|---------:|---------:|----------:|------:|--------:|----------:|\r\n| Pointer | MediumRun-.NET 6.0 | .NET 6.0 | 110.58 us | 0.336 us | 0.460\r\nus | 110.61 us | 1.00 | 0.00 | 805 B |\r\n| Ref | MediumRun-.NET 6.0 | .NET 6.0 | 107.62 us | 1.072 us | 1.537 us\r\n| 106.70 us | 0.97 | 0.01 | 805 B |\r\n| | | | | | | | | | |\r\n| Pointer | MediumRun-.NET 7.0 | .NET 7.0 | 110.06 us | 1.538 us | 2.156\r\nus | 108.52 us | 1.00 | 0.00 | 780 B |\r\n| Ref | MediumRun-.NET 7.0 | .NET 7.0 | 104.60 us | 1.565 us | 2.294 us\r\n| 103.53 us | 0.95 | 0.02 | 780 B |\r\n| | | | | | | | | | |\r\n| Pointer | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 83.92 us\r\n| 1.088 us | 1.628 us | 83.22 us | 1.00 | 0.00 | 1,376 B |\r\n| Ref | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 116.98 us |\r\n0.119 us | 0.170 us | 117.03 us | 1.40 | 0.02 | 1,376 B |\r\n\r\n### Benchmark for IncrementalCopy\r\n\r\nBenchmarkDotNet=v0.13.4, OS=Windows 11 (10.0.22000.1455/21H2) Intel Core\r\ni7-10850H CPU 2.70GHz, 1 CPU, 12 logical and 6 physical cores .NET\r\nSDK=7.0.102\r\n[Host] : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET 6.0 : .NET 6.0.13 (6.0.1322.58009), X64 RyuJIT AVX2\r\nMediumRun-.NET 7.0 : .NET 7.0.2 (7.0.222.60605), X64 RyuJIT AVX2\r\nMediumRun-.NET Framework 4.8 : .NET Framework 4.8 (4.8.4515.0), X64\r\nRyuJIT VectorSize=256\r\n\r\nIterationCount=15  LaunchCount=2  WarmupCount=10\r\n\r\n| Method | Job | Runtime | Mean | Error | StdDev | Median | Ratio |\r\nRatioSD |\r\n|-------- |----------------------------- |-------------------\r\n|----------:|----------:|----------:|----------:|------:|--------:|\r\n| Pointer | MediumRun-.NET 6.0 | .NET 6.0 | 3.775 ns | 0.0245 ns |\r\n0.0343 ns | 3.771 ns | 1.00 | 0.00 |\r\n| Ref | MediumRun-.NET 6.0 | .NET 6.0 | 3.601 ns | 0.0882 ns | 0.1320 ns\r\n| 3.538 ns | 0.95 | 0.04 |\r\n| | | | | | | | | |\r\n| Pointer | MediumRun-.NET 7.0 | .NET 7.0 | 4.486 ns | 0.1680 ns |\r\n0.2514 ns | 4.423 ns | 1.00 | 0.00 |\r\n| Ref | MediumRun-.NET 7.0 | .NET 7.0 | 3.272 ns | 0.0597 ns | 0.0856 ns\r\n| 3.211 ns | 0.73 | 0.05 |\r\n| | | | | | | | | |\r\n| Pointer | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 17.711\r\nns | 0.2031 ns | 0.2978 ns | 17.604 ns | 1.00 | 0.00 |\r\n| Ref | MediumRun-.NET Framework 4.8 | .NET Framework 4.8 | 17.299 ns |\r\n0.1080 ns | 0.1479 ns | 17.234 ns | 0.98 | 0.01 |\r\n\r\nNote: The gains on the IncrementalCopy benchmark are actually somewhat\r\nbetter than shown. In order to get valid comparisons given the API\r\nsurface change from `byte*` to `ref byte` both versions under test\r\ninclude the overhead of pinning the array. The pinning expense is not a\r\nvalid real world expense because we never do that on each call to\r\nIncrementalCopy.",
      "files_changed": [
        "Snappier.Benchmarks/IncrementalCopy.cs",
        "Snappier.Benchmarks/UnalignedCopy128.cs",
        "Snappier.Benchmarks/UnalignedCopy64.cs",
        "Snappier/Internal/CopyHelpers.cs",
        "Snappier/Internal/SnappyCompressor.cs",
        "Snappier/Internal/SnappyDecompressor.cs",
        "Snappier/Snappier.csproj"
      ],
      "insertions": 110,
      "deletions": 89,
      "original_hash": "55f498c6f1a1d13b4999846b736631f129981718",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    },
    {
      "hash": "a5e10ac84c002d9343fe3c5c40db460efd48e653",
      "author": "Brant Burnett",
      "author_email": "bburnett@centeredgesoftware.com",
      "committed_date": "2020-11-21T14:31:13-05:00",
      "message": "Add random data tests to catch more edge cases (#36)\n\nBased on the random data tests found in the Snappy C++ implementation.\r\n\r\nFixed an edge case bug around empty SnappyDecompressor.ExtractData that\r\nthe tests found, and added more unit tests around that method.",
      "files_changed": [
        "Snappier.Tests/Internal/SnappyDecompressorTests.cs",
        "Snappier.Tests/SnappyTests.cs",
        "Snappier/Internal/EmptyMemoryOwner.cs",
        "Snappier/Internal/SnappyDecompressor.cs"
      ],
      "insertions": 189,
      "deletions": 4,
      "original_hash": "a5e10ac84c002d9343fe3c5c40db460efd48e653",
      "malicious_files": [
        "Snappier/Internal/SnappyDecompressor.cs"
      ]
    }
  ]
}