{
  "vyper": [
    {
      "hash": "d366899d9780c94863b0e9df2b13e6eea5e1bc7e",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-04-30T11:14:00+00:00",
      "message": "feat: publish immutables layout (#2768)\n\nadd immutables layout to -f layout. this is a breaking change to the\r\n`layout` output, since it adds a top-level key to distinguish between\r\nstorage and immutable variables.\r\n\r\nthis also blocks immutables from colliding with storage variables.\r\nimmutables could have the same name as storage variables, depending on\r\nthe order they occur in. for instance, this was allowed\r\n```\r\nx: uint256\r\nx: immutable(uint256)\r\n```\r\n\r\nbut, this was not:\r\n```\r\nx: immutable(uint256)\r\nx: uint256\r\n```\r\n\r\nthis commit ensures both cases are blocked.",
      "files_changed": [
        "tests/cli/outputs/test_storage_layout.py",
        "tests/cli/outputs/test_storage_layout_overrides.py",
        "vyper/semantics/validation/data_positions.py",
        "vyper/semantics/validation/module.py"
      ],
      "insertions": 70,
      "deletions": 27,
      "original_hash": "d366899d9780c94863b0e9df2b13e6eea5e1bc7e",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    },
    {
      "hash": "0bb7203b584e771b23536ba065a6efda457161bb",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2023-04-28T17:40:15-07:00",
      "message": "Merge pull request from GHSA-mgv8-gggw-mrg6\n\n* fix: block storage allocator overflows\n\nthe storage allocator did not guard against overflow when no storage\nlayout override was provided. this could result in vulnerabilities like\nthe following:\n\n```vyper\nowner: public(address)\nbuffer: public(uint256[max_value(uint256)])\n\n@external\ndef initialize():\n    self.owner = msg.sender\n\n@external\ndef foo(idx: uint256, data: uint256):\n    self.buffer[idx] = data\n```\n\nwhile the get_element_ptr calculation for `self.buffer[idx]` is checked,\nit is not checked in `mod_{2**256}` arithmetic, which can lead to\narithmetic wrapping back to the `owner` variable if the provided `idx`\nis large enough.\n\n* clean up allocator logic\n\nalso fix a bug where large allocations would use too much storage due to\nfloating point rounding precision\n\n* add warning for large arrays\n\n* add note about 2**64 behavior",
      "files_changed": [
        "docs/types.rst",
        "tests/cli/outputs/test_storage_layout_overrides.py",
        "tests/functional/test_storage_slots.py",
        "vyper/semantics/analysis/data_positions.py",
        "vyper/semantics/types/subscriptable.py"
      ],
      "insertions": 75,
      "deletions": 17,
      "original_hash": "0bb7203b584e771b23536ba065a6efda457161bb",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    },
    {
      "hash": "a09cdddd8ba249d1ce68ac31ec4496e50b8a25c7",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-07-22T14:04:00-07:00",
      "message": "fix: storage slot allocation bug\n\nReentrancy key was in the wrong location\n\nThis also refactors the nonreentrant key allocation so the functionality\nhappens in the same place as global variable allocation.",
      "files_changed": [
        "vyper/old_codegen/function_definitions/parse_external_function.py",
        "vyper/old_codegen/function_definitions/parse_internal_function.py",
        "vyper/old_codegen/function_definitions/utils.py",
        "vyper/old_codegen/global_context.py",
        "vyper/old_codegen/return_.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/validation/data_positions.py"
      ],
      "insertions": 37,
      "deletions": 13,
      "original_hash": "a09cdddd8ba249d1ce68ac31ec4496e50b8a25c7",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    },
    {
      "hash": "eae0eaf86eb462746e4867352126f6c1dd43302f",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-10-25T07:58:52-07:00",
      "message": "Fix unused storage slots (#2439)\n\n* fix: don't alloc slots for repeated nonreentrancy keys\r\n\r\nthis is not a semantic bug but an optimization bug since we allocate\r\nmore slots than we actually need, leading to \"holes\" in the slot\r\nallocator -- slots which are allocated but unused.\r\n\r\n* make the test for nonreentrant slots harder",
      "files_changed": [
        "tests/cli/outputs/test_storage_layout.py",
        "vyper/semantics/validation/data_positions.py"
      ],
      "insertions": 45,
      "deletions": 24,
      "original_hash": "eae0eaf86eb462746e4867352126f6c1dd43302f",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    },
    {
      "hash": "23ed82cc30803ff94d9818e522d9cb76d521a203",
      "author": "abdullathedruid",
      "author_email": "abdulla.alkamil@gmail.com",
      "committed_date": "2022-01-07T22:03:08+00:00",
      "message": "feat: add storage layout overrides (#2593)\n\nAdd --storage-layout-file flag to compiler, which allows the user\r\nto supply a JSON file which overrides the locations of storage variables\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>",
      "files_changed": [
        "tests/cli/outputs/test_storage_layout_overrides.py",
        "vyper/cli/vyper_compile.py",
        "vyper/compiler/__init__.py",
        "vyper/compiler/phases.py",
        "vyper/exceptions.py",
        "vyper/semantics/validation/data_positions.py"
      ],
      "insertions": 285,
      "deletions": 15,
      "original_hash": "23ed82cc30803ff94d9818e522d9cb76d521a203",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    },
    {
      "hash": "b3c8c27619333a5be0974eaafdccb363923968f9",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-08-27T17:28:03+00:00",
      "message": "feat: export the storage layout",
      "files_changed": [
        "tests/cli/outputs/test_storage_layout.py",
        "tests/cli/vyper_compile/test_compile_files.py",
        "vyper/cli/vyper_compile.py",
        "vyper/cli/vyper_json.py",
        "vyper/compiler/__init__.py",
        "vyper/compiler/output.py",
        "vyper/compiler/phases.py",
        "vyper/semantics/validation/data_positions.py",
        "vyper/typing.py"
      ],
      "insertions": 94,
      "deletions": 8,
      "original_hash": "b3c8c27619333a5be0974eaafdccb363923968f9",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    },
    {
      "hash": "017ef0eb499bc4f18c2bbf488a0fab0408894164",
      "author": "Edward Amor",
      "author_email": "edward.amor3@gmail.com",
      "committed_date": "2021-11-13T00:39:06+00:00",
      "message": "feat: immutable variables (#2466)\n\n* chore: replace `is_immutable` -> `is_constant`\r\n\r\nChanged across codebase to prevent future naming confusion when the\r\n`immutable` keyword is added.\r\n\r\n* feat: add `immutable` as a reserved keyword\r\n\r\n* feat: handle immutable defs in ModuleNodeVisitor\r\n\r\n* fix: add `is_immutable` kwarg to get_type_from_annotation\r\n\r\n* feat: add `is_immutable` keyword to primitive classes\r\n\r\n* feat: set positions of immutable vars\r\n\r\n* fix: parse_type of immutable var\r\n\r\n* fix: prevent immutable modification outside constructor\r\n\r\n* WIP: add branch for immutable vars in expr.py\r\n\r\n* fix: DataPosition class ImmutableSlot -> CodeOffset\r\n\r\n* fix: runtime loading of immutables\r\n\r\n* feat: append to init lll storage of immutables\r\n\r\n* fix: update VariableRecord class + add immutables to global ctx\r\n\r\n* fix: modify constructor to return runtime + immutables\r\n\r\n* fix: constructor handles data section\r\n\r\n* fix: account for immutables at end of runtime code\r\n\r\nImmutable values are appended to the runtime code, and so using\r\n`codesize` opcode will include them in the returned size. However, the\r\nimmutables section of the runtime code is not at the end, so to access\r\nit we need to account for the fact that `codesize` gives us an inflated\r\nvalue. We do this by taking the sum of all the allocated space of all\r\nimmutables, and subtrace codesize by this and then add the offset of the\r\ndata.\r\n\r\n* fix: vyper grammar include immutable_def\r\n\r\n* test: simple usage of immutable keyword with uint256\r\n\r\n* fix: remove copying of immutables from external_function.py\r\n\r\n* fix: add `is_immutable` kwarg to more Definition classes\r\n\r\n* fix: raise syntax exception if immutable not assigned a value\r\n\r\n* test: immutable syntax, simple cases\r\n\r\n* test: accessing stored immutable\r\n\r\n* test: verify immutables of dynamic length are disallowed\r\n\r\n* fix: disallow bytes/string immutables (momentarily)\r\n\r\n* fix: use make_setter for memory cp operation of immutables\r\n\r\n* fix: store memory loc + offset in data section in metadata\r\n\r\n* fix: use data offset + memory loc from metadata section\r\n\r\n* fix: remove restriction using strings/bytes immutables\r\n\r\n* fix(test): verify usage of string/bytes immutables\r\n\r\n* fix: only set _metadata on immutable during first pass\r\n\r\n* fix: return size of runtime code to account for data section\r\n\r\n* chore: fix test parametrization\r\n\r\n* test: multiple immutable values\r\n\r\n* fix(test): change dummy address used\r\n\r\n* fix: allocate a new var not internal var\r\n\r\nAllocating an internal var results in deallocation once the assign\r\noperation has been parsed, resulting in the overwriting of immutable\r\nvalues\r\n\r\n* test: user defined struct immutable\r\n\r\n* fix: allow immutable sequences (add kwarg to classes)\r\n\r\n* test: immutable list usage\r\n\r\n* chore: modify test parametrization\r\n\r\nCo-authored-by: El De-dog-lo <3859395+fubuloubu@users.noreply.github.com>\r\n\r\n* docs: add immutable usage docs\r\n\r\n* fix: allocate memory of immutable in constructor\r\n\r\n* fix: disallow multiple assignments to immutable\r\n\r\n* test: multiple assignments blocked\r\n\r\n* fix: set immutable data location to CODE\r\n\r\n* fix: verify immutable is given a single argument\r\n\r\n* fix: if stmt use bool type as condition\r\n\r\n* fix: make immutable data size a cached prop on global ctx\r\n\r\n* fix: swap 'lll' arguments, offset is first code is second\r\n\r\n* fix: remove _metadata dict on LLLnode for immutables\r\n\r\nInstead when parsing the immutable modify the variable record in the global ctx\r\n\r\n* fix: mypy typing error\r\n\r\n* Update vyper/semantics/types/indexable/sequence.py\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>\r\n\r\n* Update vyper/semantics/types/bases.py\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>\r\n\r\n* fix: use cached property from vyper.utils\r\n\r\n* chore: leave todo, come back and resolve immutable offsets at compile time\r\n\r\n* update a comment about lll macro\r\n\r\nCo-authored-by: El De-dog-lo <3859395+fubuloubu@users.noreply.github.com>\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>",
      "files_changed": [
        "docs/scoping-and-declarations.rst",
        "tests/compiler/LLL/test_compile_lll.py",
        "tests/grammar/vyper.lark",
        "tests/parser/features/test_immutable.py",
        "tests/parser/syntax/test_immutables.py",
        "vyper/ast/signatures/function_signature.py",
        "vyper/compiler/utils.py",
        "vyper/lll/compile_lll.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/global_context.py",
        "vyper/old_codegen/parser.py",
        "vyper/old_codegen/types/types.py",
        "vyper/semantics/environment.py",
        "vyper/semantics/namespace.py",
        "vyper/semantics/types/bases.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/indexable/mapping.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/semantics/types/user/interface.py",
        "vyper/semantics/types/user/struct.py",
        "vyper/semantics/types/utils.py",
        "vyper/semantics/types/value/address.py",
        "vyper/semantics/types/value/array_value.py",
        "vyper/semantics/validation/data_positions.py",
        "vyper/semantics/validation/local.py",
        "vyper/semantics/validation/module.py"
      ],
      "insertions": 496,
      "deletions": 70,
      "original_hash": "017ef0eb499bc4f18c2bbf488a0fab0408894164",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    },
    {
      "hash": "046ea166d93b8351da7c5d74115893eea2f60d76",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-11-27T18:37:13+00:00",
      "message": "refactor: front-end type system (#2974)\n\nThis commit refactors the front-end type system.\r\n\r\nCurrently, there are essentially two classes types for each vyper type.\r\n\"Primitives\" represented raw types, and \"Definitions\" represent\r\nthe instantiation of types attached to each expression in a program.\r\n\"Definitions\" additionally carry around annotation information related\r\nto the expressions they tag, such as mutability and location info. This\r\nsystem also handled dispatching into the correct routines for cases\r\nwhere a raw type (e.g. \"MyStruct\") is used in expr land (vs an instance\r\nof a type, e.g.  \"my_struct\"). This is important because certain types\r\nare callable or attributable - specifically, constructors and enum\r\nmembers (ex. `MyStruct()` and `MyEnum.FOO`).\r\n\r\nThis commit reworks the system by factoring the annotation info into\r\nVyperType and ExprInfo. \"Primitives\" in the old system can be thought of\r\nas VyperTypes, and \"Definitions\" in the old system are most similar to\r\nthe new ExprInfo. To handle cases where types can live in expr land,\r\nthis commit also clarifies that usage by promoting raw types into the\r\nspecial, internal TYPE_T type (which can be thought of as \"the type of\r\na type\"). This commit also simplifies the inheritance structure of vyper\r\ntypes.\r\n\r\nSome other miscellaneous things in this commit:\r\n- AST class hierarchy gets more refined - addition of ExprNode\r\n- rename of `vyper/semantics/validation/` -> `vyper/semantics/analysis/`\r\n- type system directory structure simplified\r\n- merge of `builtin_functions/` and `builtin_interfaces/` to `builtins/`\r\n\r\nCo-authored-by: z80 <z80dev@mlnl.finance>",
      "files_changed": [
        "docs/interfaces.rst",
        "tests/builtins/folding/test_abs.py",
        "tests/builtins/folding/test_addmod_mulmod.py",
        "tests/builtins/folding/test_bitwise.py",
        "tests/builtins/folding/test_epsilon.py",
        "tests/builtins/folding/test_floor_ceil.py",
        "tests/builtins/folding/test_fold_as_wei_value.py",
        "tests/builtins/folding/test_keccak_sha.py",
        "tests/builtins/folding/test_len.py",
        "tests/builtins/folding/test_min_max.py",
        "tests/builtins/folding/test_powmod.py",
        "tests/functional/context/conftest.py",
        "tests/functional/context/test_namespace.py",
        "tests/functional/context/types/test_event.py",
        "tests/functional/context/types/test_pure_types.py",
        "tests/functional/context/types/test_size_in_bytes.py",
        "tests/functional/context/types/test_type_from_abi.py",
        "tests/functional/context/types/test_type_from_annotation.py",
        "tests/functional/context/validation/test_array_index.py",
        "tests/functional/context/validation/test_cyclic_function_calls.py",
        "tests/functional/context/validation/test_for_loop.py",
        "tests/functional/context/validation/test_potential_types.py",
        "tests/functional/semantics/analysis/test_array_index.py",
        "tests/functional/semantics/analysis/test_cyclic_function_calls.py",
        "tests/functional/semantics/analysis/test_for_loop.py",
        "tests/functional/semantics/analysis/test_potential_types.py",
        "tests/functional/semantics/conftest.py",
        "tests/functional/semantics/test_namespace.py",
        "tests/functional/semantics/types/test_event.py",
        "tests/functional/semantics/types/test_pure_types.py",
        "tests/functional/semantics/types/test_size_in_bytes.py",
        "tests/functional/semantics/types/test_type_from_abi.py",
        "tests/functional/semantics/types/test_type_from_annotation.py",
        "tests/functions/folding/test_abs.py",
        "tests/functions/folding/test_addmod_mulmod.py",
        "tests/functions/folding/test_bitwise.py",
        "tests/functions/folding/test_epsilon.py",
        "tests/functions/folding/test_floor_ceil.py",
        "tests/functions/folding/test_fold_as_wei_value.py",
        "tests/functions/folding/test_keccak_sha.py",
        "tests/functions/folding/test_len.py",
        "tests/functions/folding/test_min_max.py",
        "tests/functions/folding/test_powmod.py",
        "tests/parser/exceptions/test_invalid_operation.py",
        "tests/parser/exceptions/test_invalid_reference.py",
        "tests/parser/exceptions/test_invalid_type_exception.py",
        "tests/parser/exceptions/test_namespace_collision.py",
        "tests/parser/exceptions/test_structure_exception.py",
        "tests/parser/features/external_contracts/test_external_contract_calls.py",
        "tests/parser/functions/test_convert.py",
        "tests/parser/functions/test_interfaces.py",
        "tests/parser/functions/test_raw_call.py",
        "tests/parser/syntax/test_interfaces.py",
        "tests/parser/syntax/utils/test_event_names.py",
        "tests/parser/types/test_identifier_naming.py",
        "vyper/ast/expansion.py",
        "vyper/ast/folding.py",
        "vyper/ast/nodes.py",
        "vyper/ast/nodes.pyi",
        "vyper/ast/signatures/function_signature.py",
        "vyper/ast/signatures/interface.py",
        "vyper/builtin_functions/__init__.py",
        "vyper/builtin_functions/convert.py",
        "vyper/builtin_functions/functions.py",
        "vyper/builtin_functions/signatures.py",
        "vyper/builtin_functions/utils.py",
        "vyper/builtin_interfaces/ERC165.py",
        "vyper/builtin_interfaces/ERC20.py",
        "vyper/builtin_interfaces/ERC20Detailed.py",
        "vyper/builtin_interfaces/ERC4626.py",
        "vyper/builtin_interfaces/ERC721.py",
        "vyper/builtin_interfaces/__init__.py",
        "vyper/builtins/__init__.py",
        "vyper/builtins/_convert.py",
        "vyper/builtins/_signatures.py",
        "vyper/builtins/_utils.py",
        "vyper/builtins/functions.py",
        "vyper/builtins/interfaces/ERC165.py",
        "vyper/builtins/interfaces/ERC20.py",
        "vyper/builtins/interfaces/ERC20Detailed.py",
        "vyper/builtins/interfaces/ERC4626.py",
        "vyper/builtins/interfaces/ERC721.py",
        "vyper/builtins/interfaces/__init__.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/global_context.py",
        "vyper/codegen/stmt.py",
        "vyper/codegen/types/convert.py",
        "vyper/compiler/output.py",
        "vyper/semantics/README.md",
        "vyper/semantics/__init__.py",
        "vyper/semantics/analysis/__init__.py",
        "vyper/semantics/analysis/annotation.py",
        "vyper/semantics/analysis/base.py",
        "vyper/semantics/analysis/common.py",
        "vyper/semantics/analysis/data_positions.py",
        "vyper/semantics/analysis/levenshtein_utils.py",
        "vyper/semantics/analysis/local.py",
        "vyper/semantics/analysis/module.py",
        "vyper/semantics/analysis/utils.py",
        "vyper/semantics/environment.py",
        "vyper/semantics/namespace.py",
        "vyper/semantics/types/__init__.py",
        "vyper/semantics/types/abstract.py",
        "vyper/semantics/types/base.py",
        "vyper/semantics/types/bases.py",
        "vyper/semantics/types/bytestrings.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/indexable/__init__.py",
        "vyper/semantics/types/indexable/mapping.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/semantics/types/primitives.py",
        "vyper/semantics/types/shortcuts.py",
        "vyper/semantics/types/subscriptable.py",
        "vyper/semantics/types/user.py",
        "vyper/semantics/types/user/__init__.py",
        "vyper/semantics/types/user/enum.py",
        "vyper/semantics/types/user/event.py",
        "vyper/semantics/types/user/interface.py",
        "vyper/semantics/types/user/struct.py",
        "vyper/semantics/types/utils.py",
        "vyper/semantics/types/value/__init__.py",
        "vyper/semantics/types/value/address.py",
        "vyper/semantics/types/value/array_value.py",
        "vyper/semantics/types/value/boolean.py",
        "vyper/semantics/types/value/bytes_fixed.py",
        "vyper/semantics/types/value/numeric.py",
        "vyper/semantics/validation/__init__.py",
        "vyper/semantics/validation/annotation.py",
        "vyper/semantics/validation/base.py",
        "vyper/semantics/validation/data_positions.py",
        "vyper/semantics/validation/levenshtein_utils.py",
        "vyper/semantics/validation/local.py",
        "vyper/semantics/validation/module.py",
        "vyper/semantics/validation/utils.py",
        "vyper/utils.py"
      ],
      "insertions": 9672,
      "deletions": 10112,
      "original_hash": "046ea166d93b8351da7c5d74115893eea2f60d76",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    },
    {
      "hash": "4d3c1e33f96b3428937527c6c86443e63260f864",
      "author": "Ben Hauser",
      "author_email": "ben@hauser.id",
      "committed_date": "2021-05-03T00:36:07+06:00",
      "message": "feat: minimal implementation of `data_positions` expansion pass\n\nThis commit only includes logic for determining storage slots,\nbut also lays out an API to add in logic for memory and calldata\npositions.",
      "files_changed": [
        "vyper/compiler/phases.py",
        "vyper/context/__init__.py",
        "vyper/context/validation/data_positions.py"
      ],
      "insertions": 39,
      "deletions": 1,
      "original_hash": "4d3c1e33f96b3428937527c6c86443e63260f864",
      "malicious_files": [
        "vyper/semantics/analysis/data_positions.py"
      ]
    }
  ]
}