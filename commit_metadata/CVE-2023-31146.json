{
  "vyper": [
    {
      "hash": "1c6c60567c798f0e8b4a8874dafd80a8149cfa3d",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-21T17:37:08+00:00",
      "message": "fix sar emulation for pre-constantinople",
      "files_changed": [
        "vyper/old_codegen/arg_clamps.py",
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 10,
      "deletions": 2,
      "original_hash": "1c6c60567c798f0e8b4a8874dafd80a8149cfa3d",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "a914a5c102538ae0bc1df56e8e31cbf5b4f887ba",
      "author": "Bryant Eisenbach",
      "author_email": "fubuloubu@gmail.com",
      "committed_date": "2019-12-04T00:06:34-05:00",
      "message": "bug: Low precion of 28 caused inconsistent results",
      "files_changed": [
        "vyper/parser/parser_utils.py"
      ],
      "insertions": 3,
      "deletions": 0,
      "original_hash": "a914a5c102538ae0bc1df56e8e31cbf5b4f887ba",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "f543572a906806df55b9c7d109cdf8bb8886e8ed",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-11-09T10:57:12-08:00",
      "message": "propagate revert data when external call fails (#2531)",
      "files_changed": [
        "tests/base_conftest.py",
        "tests/parser/features/external_contracts/test_external_contract_calls.py",
        "tests/parser/features/test_assert.py",
        "vyper/builtin_functions/functions.py",
        "vyper/old_codegen/external_call.py",
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 39,
      "deletions": 4,
      "original_hash": "f543572a906806df55b9c7d109cdf8bb8886e8ed",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "e035bef58cf83318c13accb03be261805341ad31",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-08T20:22:04-07:00",
      "message": "add clamping to ABI decoder",
      "files_changed": [
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/arg_clamps.py",
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 80,
      "deletions": 3,
      "original_hash": "e035bef58cf83318c13accb03be261805341ad31",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "2e0ae1065a016c450b8fe2ffe1b7b384ed8cca44",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2019-04-08T14:16:41+02:00",
      "message": "Add UnmatchedReturnChecker.",
      "files_changed": [
        "tests/parser/exceptions/test_constancy_exception.py",
        "tests/parser/features/test_assert.py",
        "tests/parser/syntax/test_unbalanced_return.py",
        "vyper/parser/parser_utils.py"
      ],
      "insertions": 44,
      "deletions": 19,
      "original_hash": "2e0ae1065a016c450b8fe2ffe1b7b384ed8cca44",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "fbed83c5e00d1fd0272e720a8f08118e613d8289",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-04-13T21:46:47+00:00",
      "message": "fix: abi_encode empty bytestring literals (#2784)\n\nthis fixes a regression in 548d35d72, where if length_bound == 0, bytes\r\ncould still be copied anyways (resulting in writing past the destination\r\nbuffer's allocated memory)",
      "files_changed": [
        "tests/functional/codegen/test_abi_encode.py",
        "vyper/codegen/core.py"
      ],
      "insertions": 33,
      "deletions": 11,
      "original_hash": "fbed83c5e00d1fd0272e720a8f08118e613d8289",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "4f8289a81206f767df1900ac48f485d90fc87edb",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2023-05-11T13:30:00-07:00",
      "message": "Merge pull request from GHSA-3p37-3636-q8wv\n\nin dynarray_make_setter, the length is copied before the data. when the\ndst and src arrays do not overlap, this is not a problem. however, when\nthe dst and src are the same dynarray, this can lead to a\nstore-before-load, leading any array bounds checks on the right hand\nside to function incorrectly. here is an example:\n\n```vyper\n@external\ndef should_revert() -> DynArray[uint256,3]:\n    a: DynArray[uint256, 3] = [1, 2, 3]\n    a = empty(DynArray[uint256, 3])\n    a = [self.a[0], self.a[1], self.a[2]]\n    return a  # if bug: returns [1,2,3]\n```\n\nthis commit moves the length store to after the data copy in\ndynarray_make_setter. for hygiene, it also moves the length store to\nafter the data copy in several other routines. I left pop_dyn_array()\nunchanged, because moving the routine does not actually perform any data\ncopy, it just writes the new length (and optionally returns a pointer to\nthe popped item).",
      "files_changed": [
        "tests/parser/types/test_dynamic_array.py",
        "vyper/codegen/core.py"
      ],
      "insertions": 123,
      "deletions": 15,
      "original_hash": "4f8289a81206f767df1900ac48f485d90fc87edb",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "a37bde5fb34fb212d2991a4c6ef9156d7f417b2a",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-05T19:24:53-08:00",
      "message": "feat: introduce special immutables address space (#2689)\n\nThis commit introduces a new address space for manipulating immutables.\r\nIt also modifies the existing \"code\" address space which resolves\r\npointers as starting from the start of the \"data\" section instead of the\r\nstart of the \"text\" section of the code (air quotes because these\r\nsections are conceptual rather than part of an object format). Lastly it\r\nslightly changes the semantics of the `lll` opcode (and for clarity,\r\nrenames it to `deploy`) in order to save a few instructions in the\r\nconstructor.\r\n\r\nThis is important for two reasons. One, other VMs like zksync model\r\nimmutables differently by mapping them onto storage. In order to capture\r\ndifferent handling of the address space (immutables -> storage in zksync\r\nvs immutables -> runtime code in EVM), the new pseudo opcodes `iload`\r\nand `istore` can be compiled differently depending on the backend. For\r\nEVM, they compile to `mload` and `mstore` at magic locations calculated\r\nat assembly time. Note that `iload` and `istore` are not valid outside\r\nof constructor code (that is, code which does not have a child `deploy`\r\nsection), and assembly will panic if they are used in non-constructor\r\ncode.\r\n\r\nThe second reason has to do with runtime code layout. Currently, the IR\r\ncodegen has no idea what the codesize will be (as that can only be known\r\nafter assembly), so we have runtime logic to calculate offsets of data\r\nthat is stored in code (e.g. currently to get data at position `x` in\r\nthe runtime code, we need to issue pointer arithmetic `(add ~codelen x)`\r\nto get the runtime location of the data). By introducing new pseudo\r\nopcodes, we can resolve these locations at assembly time instead of at\r\nruntime.\r\n\r\nThis commit also renames the \"code\" address space to \"data\", to make it\r\nclearer that it is used to access the data section of the code. The\r\npseudo-opcode `codeload` has been renamed to `dload`. For the same\r\nefficiency reason described above, `data` is considered to start at the\r\nend of the runtime code, so `dload` usage is `dload x` instead of\r\n`codeload (add ~codelen x)`.\r\n\r\nTo accomplish all this, a couple magic locations have been introduced\r\ninto the assembly: `_mem_deploy_start` and `_mem_deploy_end`. These are\r\nresolved at assembly time to the end of the runtime code just prior to\r\ndeploy - immutables are stored starting from `_mem_deploy_end`. To\r\nsupport the assembly-time calculation of these offsets, two magic\r\nopcodes have been added to the assembly: `_DEPLOY_MEM_OFST_<N>` and\r\n`_OFST`. `_DEPLOY_MEM_OFST_<N>` is used to pass information from the\r\nmemory allocator to the assembler (which is required to calculate the\r\nlocation of where immutables will be stored in memory), and `_OFST` is\r\nused to resolve offsets from `_sym_code_end` and `_mem_deploy_end` at\r\ncompile time.",
      "files_changed": [
        "tests/compiler/LLL/test_compile_lll.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/context.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/function_definitions/external_function.py",
        "vyper/codegen/global_context.py",
        "vyper/codegen/lll_node.py",
        "vyper/codegen/memory_allocator.py",
        "vyper/codegen/module.py",
        "vyper/compiler/output.py",
        "vyper/evm/opcodes.py",
        "vyper/lll/compile_lll.py",
        "vyper/utils.py"
      ],
      "insertions": 303,
      "deletions": 172,
      "original_hash": "a37bde5fb34fb212d2991a4c6ef9156d7f417b2a",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "de74722bf2d8718cca46902be165f9fe0e3641dd",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-09-17T19:50:01+02:00",
      "message": "Merge branch 'master' into 901_less_gas_for_private_functions",
      "files_changed": [
        "Dockerfile",
        "bin/vyper",
        "docs/installing-vyper.rst",
        "examples/tokens/ERC721.vy",
        "examples/voting/ballot.vy",
        "tests/examples/tokens/test_erc721.py",
        "tests/parser/integration/test_escrow.py",
        "tests/parser/syntax/test_bool.py",
        "vyper/optimizer.py",
        "vyper/parser/expr.py",
        "vyper/parser/global_context.py",
        "vyper/parser/parser.py",
        "vyper/parser/parser_utils.py",
        "vyper/signatures/function_signature.py",
        "vyper/types/types.py"
      ],
      "insertions": 759,
      "deletions": 306,
      "original_hash": "de74722bf2d8718cca46902be165f9fe0e3641dd",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "e34bfed035afc3bd67267d208f98fa65bf7b51f2",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-24T20:16:37-07:00",
      "message": "feat: optimize byte array copier (#2725)\n\nthis commit optimizes the make_byte_array_copier and\r\nmake_dynarray_copier routines. specifically, it reduces the number of\r\nwords to copy in the main loop by 1. for batch copies\r\n(memory/calldata/code -> memory), this reduces gas by 3, and for\r\nnon-batch copies (e.g. storage -> memory), this reduces gas by one loop\r\niteration and one read. importantly, when the number of bytes is small\r\n(e.g. copy Bytes[32]), this triggers an optimization in `copy_bytes` so\r\nthe whole copy operation is a single load/store (plus the load/store\r\nfor the length)",
      "files_changed": [
        "examples/tokens/ERC20.vy",
        "vyper/codegen/core.py"
      ],
      "insertions": 44,
      "deletions": 28,
      "original_hash": "e34bfed035afc3bd67267d208f98fa65bf7b51f2",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "256672c8c91fde7d717150182d2d26298a99e663",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2019-01-31T11:38:38-08:00",
      "message": "Fix assignment to heterogeneously stored tuples\n\nFixes #1160",
      "files_changed": [
        "tests/parser/functions/test_return_tuple.py",
        "vyper/parser/parser_utils.py"
      ],
      "insertions": 17,
      "deletions": 8,
      "original_hash": "256672c8c91fde7d717150182d2d26298a99e663",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "ff772b24b93af4b58bdef1b3504c1371334afa85",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2020-04-07T10:43:35-07:00",
      "message": "Add tests for new RHS clear",
      "files_changed": [
        "tests/parser/functions/test_clear.py",
        "vyper/parser/parser_utils.py",
        "vyper/parser/stmt.py"
      ],
      "insertions": 59,
      "deletions": 17,
      "original_hash": "ff772b24b93af4b58bdef1b3504c1371334afa85",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "7b2397ba6de251117dd23cc4a9e6f7b6120da7ee",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-18T16:04:30-07:00",
      "message": "feat: add all integer and bytes types (#2705)\n\nThis commit adds all intN/uintN/bytesM types, bringing vyper to full\r\nimplementation of ABIv2 (technically in line with solidity as they do\r\nnot have fixedMxN/ufixedMxN types). Practically speaking, these are the\r\ntypes that people will expect to be able to use.\r\n\r\nThe implementation is a first pass. It generates the new types with\r\nPython dynamic class generation since the vyper/semantics type system\r\nhas a 1:1 correspondence between Vyper and Python types. Future work\r\nshould include a generous refactoring of the approach. Before release,\r\nwe need to add more tests of arithmetic, and any builtin functions which\r\naccept integers and bytesM types.",
      "files_changed": [
        "tests/parser/functions/test_unsafe_math.py",
        "tests/parser/syntax/test_list.py",
        "tests/parser/syntax/test_raw_call.py",
        "vyper/builtin_functions/functions.py",
        "vyper/builtin_functions/signatures.py",
        "vyper/codegen/core.py",
        "vyper/codegen/types/convert.py",
        "vyper/codegen/types/types.py",
        "vyper/semantics/environment.py",
        "vyper/semantics/types/__init__.py",
        "vyper/semantics/types/abstract.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/semantics/types/value/address.py",
        "vyper/semantics/types/value/array_value.py",
        "vyper/semantics/types/value/bytes_fixed.py",
        "vyper/semantics/types/value/numeric.py",
        "vyper/utils.py"
      ],
      "insertions": 139,
      "deletions": 105,
      "original_hash": "7b2397ba6de251117dd23cc4a9e6f7b6120da7ee",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "52ac67ac9eb1910c91d93f9729494907f34efbfa",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-08-02T21:51:13+00:00",
      "message": "fix handling of None in add_variable_offset",
      "files_changed": [
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 8,
      "deletions": 1,
      "original_hash": "52ac67ac9eb1910c91d93f9729494907f34efbfa",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "a87fc4e13f7875112f71110df44cc30fe540409a",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-10-03T17:41:09+00:00",
      "message": "simplify and optimize make_setter\n\nsimplify the number of cases, and also improve the heuristic for whether\noffsets can be calculated at compile time",
      "files_changed": [
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/function_definitions/external_function.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/return_.py",
        "vyper/old_codegen/self_call.py",
        "vyper/old_codegen/stmt.py",
        "vyper/old_codegen/types/check.py"
      ],
      "insertions": 100,
      "deletions": 191,
      "original_hash": "a87fc4e13f7875112f71110df44cc30fe540409a",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "0ccd33919e7c87d4fdff5a5142fdedb96c331a90",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-15T22:41:19+00:00",
      "message": "wrap ABI values in tuples as needed",
      "files_changed": [
        "vyper/builtin_functions/functions.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/events.py",
        "vyper/old_codegen/external_call.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/return_.py",
        "vyper/old_codegen/stmt.py"
      ],
      "insertions": 66,
      "deletions": 47,
      "original_hash": "0ccd33919e7c87d4fdff5a5142fdedb96c331a90",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "d6751104c3942a05157138fc9e725f37daa2f567",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-06-19T16:34:39-04:00",
      "message": "feat: implement flags semantics for enum (#2915)\n\nimplement operators so that enums can be used like Python's `enum.Flag`\n(\"Base class for creating enumerated constants that can be combined\nusing the bitwise operations without losing their Flag membership\").\n\nthis also enables bitwise and/or operators for uint256, and deprecates\nthe builtins `bitwise_and` and `bitwise_or`\n\nthis commit also adds clampers for enums - an enum must be in bound for\nthe number of members the enum has (and also, any enum runtime value\nmust be nonzero).\n\nCo-authored-by: tserg <8017125+tserg@users.noreply.github.com>",
      "files_changed": [
        "docs/built-in-functions.rst",
        "docs/types.rst",
        "tests/functions/folding/test_bitwise.py",
        "tests/grammar/vyper.lark",
        "tests/parser/exceptions/test_syntax_exception.py",
        "tests/parser/features/test_clampers.py",
        "tests/parser/functions/test_bitwise.py",
        "tests/parser/syntax/test_enum.py",
        "tests/parser/types/numbers/test_unsigned_ints.py",
        "tests/parser/types/test_bytes.py",
        "tests/parser/types/test_bytes_zero_padding.py",
        "tests/parser/types/test_enum.py",
        "vyper/ast/nodes.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/types/types.py",
        "vyper/semantics/types/user/__init__.py",
        "vyper/semantics/types/user/enum.py",
        "vyper/semantics/validation/annotation.py",
        "vyper/semantics/validation/utils.py"
      ],
      "insertions": 402,
      "deletions": 16,
      "original_hash": "d6751104c3942a05157138fc9e725f37daa2f567",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "e547a8688095a751a0f414918e1548ad259beb5a",
      "author": "vub",
      "author_email": "Vitalik Buterin",
      "committed_date": "2017-04-07T11:18:38-04:00",
      "message": "Refactored byte array operations",
      "files_changed": [
        "tests/test_invalids.py",
        "tests/test_parser.py",
        "viper/functions.py",
        "viper/optimizer.py",
        "viper/parser.py",
        "viper/parser_utils.py"
      ],
      "insertions": 227,
      "deletions": 54,
      "original_hash": "e547a8688095a751a0f414918e1548ad259beb5a",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "4735d2e32ea44a93ed377b36784175378dadee79",
      "author": "Jackie Xu",
      "author_email": "jackie@jackiexu.com",
      "committed_date": "2017-09-13T18:57:30+02:00",
      "message": "Update whitespace for PEP-0008 compliance",
      "files_changed": [
        "viper/compile_lll.py",
        "viper/exceptions.py",
        "viper/function_signature.py",
        "viper/functions.py",
        "viper/opcodes.py",
        "viper/optimizer.py",
        "viper/parser.py",
        "viper/parser_utils.py",
        "viper/types.py",
        "viper/utils.py"
      ],
      "insertions": 152,
      "deletions": 67,
      "original_hash": "4735d2e32ea44a93ed377b36784175378dadee79",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "4b3b636badf4389b5890837f27c66a28fda3cb3c",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-07-25T08:24:28-07:00",
      "message": "fix some unapplied optimizations (#2944)\n\nsome binop optimizations were getting rolled back, because\r\n`_deep_contains` does not work on deconstructed IRnodes\r\n\r\nfix an optimization regression because `unique_symbols` breaks the\r\nmerge_calldataload optimization\r\n\r\nfix a missed case in merge_calldataload and merge_memzero where the\r\noptimization would not get applied if the mstores were the last items in\r\nthe `seq` block.\r\n\r\nuse calculated indexes for node removal instead of relying on node\r\nequality",
      "files_changed": [
        "vyper/codegen/core.py",
        "vyper/ir/optimizer.py"
      ],
      "insertions": 39,
      "deletions": 16,
      "original_hash": "4b3b636badf4389b5890837f27c66a28fda3cb3c",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "7b22356812e133b2a59f71b0cfa39f96d2441528",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-02-13T15:27:49-08:00",
      "message": "fix convert to bytes32 (#2655)\n\nThis commit fixes a bug in converting between Bytes types and bytes32.\r\nBecause of how bytes copying (and bytes zeroing -- `bytes = b\"\"`) works,\r\na bytearray may have dirty bytes in its last word past the end of the\r\nruntime length of the bytestring. For instance, the bytestring \"a\" maybe\r\nbe represented as\r\n```\r\nlength | data\r\n0x01   | 0x6162\r\n```\r\nThis commit fixes that by ensuring that any dirty bytes get zeroed out\r\nin the result by using bitwise operations.\r\n\r\nThis commit also changes the order of arguments in the convenience\r\nfunctions shl()/shr()/sar() to match the argument order of the EVM.",
      "files_changed": [
        "tests/parser/functions/test_slice.py",
        "vyper/builtin_functions/convert.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/core.py"
      ],
      "insertions": 55,
      "deletions": 16,
      "original_hash": "7b22356812e133b2a59f71b0cfa39f96d2441528",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "d8eae40870d4bb89deb57475f1d01498f12b30cf",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2020-04-07T10:28:44-07:00",
      "message": "Factor mzero into a function",
      "files_changed": [
        "vyper/parser/parser_utils.py",
        "vyper/parser/stmt.py"
      ],
      "insertions": 10,
      "deletions": 5,
      "original_hash": "d8eae40870d4bb89deb57475f1d01498f12b30cf",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "3abe588e05be6f6cbfac283739d797ef6c485756",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2023-01-04T13:34:12-08:00",
      "message": "refactor: merge front-end and codegen type systems (#3182)\n\nfor historical reasons, vyper models its type system in two places, in\r\n`vyper/semantics/types` and `vyper/codegen/types`. this merges the two\r\nsystems (with plenty of pair programming help from @z80dev!)          \r\n\r\nthis commit required a couple kludges in order to get machinery from the\r\nnew type system into codegen regions of the code, but those should get\r\nrefactored out with follow-up work on `GlobalContext` and\r\n`FunctionSignature`.\r\n\r\nalso:\r\n\r\n- rename `ModuleNodeVisitor` to `ModuleAnalyzer`\r\n- move the `VariableRecord` class to `vyper/codegen/context.py`\r\n- simplify `GlobalContext.parse_type` and a lot of associated machinery\r\n\r\nCo-authored-by: z80 <z80@ophy.xyz>",
      "files_changed": [
        "tests/fixtures/memorymock.py",
        "tests/functional/semantics/analysis/test_cyclic_function_calls.py",
        "tests/functional/semantics/analysis/test_potential_types.py",
        "tests/parser/functions/test_convert.py",
        "tests/parser/functions/test_minmax.py",
        "tests/parser/functions/test_minmax_value.py",
        "tests/parser/functions/test_unsafe_math.py",
        "tests/parser/syntax/test_enum.py",
        "tests/parser/types/numbers/test_signed_ints.py",
        "tests/parser/types/numbers/test_unsigned_ints.py",
        "tests/parser/types/test_node_types.py",
        "vyper/ast/signatures/__init__.py",
        "vyper/ast/signatures/function_signature.py",
        "vyper/ast/signatures/interface.py",
        "vyper/builtins/_convert.py",
        "vyper/builtins/_signatures.py",
        "vyper/builtins/functions.py",
        "vyper/codegen/abi_encoder.py",
        "vyper/codegen/arithmetic.py",
        "vyper/codegen/context.py",
        "vyper/codegen/core.py",
        "vyper/codegen/events.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/external_call.py",
        "vyper/codegen/function_definitions/external_function.py",
        "vyper/codegen/global_context.py",
        "vyper/codegen/ir_node.py",
        "vyper/codegen/keccak256_helper.py",
        "vyper/codegen/memory_allocator.py",
        "vyper/codegen/return_.py",
        "vyper/codegen/self_call.py",
        "vyper/codegen/stmt.py",
        "vyper/codegen/types/__init__.py",
        "vyper/codegen/types/convert.py",
        "vyper/codegen/types/types.py",
        "vyper/semantics/analysis/annotation.py",
        "vyper/semantics/analysis/local.py",
        "vyper/semantics/analysis/module.py",
        "vyper/semantics/types/__init__.py",
        "vyper/semantics/types/base.py",
        "vyper/semantics/types/bytestrings.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/primitives.py",
        "vyper/semantics/types/shortcuts.py",
        "vyper/semantics/types/subscriptable.py",
        "vyper/semantics/types/user.py",
        "vyper/utils.py"
      ],
      "insertions": 1215,
      "deletions": 1771,
      "original_hash": "3abe588e05be6f6cbfac283739d797ef6c485756",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "bc66da75d0e81b0a404d07d08852713bec45074b",
      "author": "iamdefinitelyahuman",
      "author_email": "ben.hauser@hyperlink.technology",
      "committed_date": "2020-03-16T14:40:53+04:00",
      "message": "refactor return checks to avoid conversion to python ast",
      "files_changed": [
        "vyper/parser/parser_utils.py",
        "vyper/signatures/function_signature.py"
      ],
      "insertions": 47,
      "deletions": 72,
      "original_hash": "bc66da75d0e81b0a404d07d08852713bec45074b",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "a00956b8599db01d616798ecb62c29bf8f577f5b",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2019-04-06T00:05:01+02:00",
      "message": "Add UnmatchedReturnChecker to FunctionSignature, for selectively checking\nbalanced return statements.",
      "files_changed": [
        "vyper/parser/parser_utils.py",
        "vyper/signatures/function_signature.py"
      ],
      "insertions": 44,
      "deletions": 1,
      "original_hash": "a00956b8599db01d616798ecb62c29bf8f577f5b",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "8b8cff233d766f2fda55d82cbf9a8d3160ab4e7a",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-08-01T08:36:18-07:00",
      "message": "fix: add some missing error messages (#3014)\n\n- add error message to int/bytes clamps. they are used directly (not via\r\n  clamp_basetype) in conversion functions\r\n- note that the message/annotation for int/bytes clamps reflects the\r\n  outputted type, not the input type",
      "files_changed": [
        "vyper/codegen/core.py"
      ],
      "insertions": 17,
      "deletions": 8,
      "original_hash": "8b8cff233d766f2fda55d82cbf9a8d3160ab4e7a",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "27cec1b524072018f8866c18e1a95b010b7400ed",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-02-15T08:08:36-08:00",
      "message": "feat: implement append and pop for dynarray (#2615)\n\nadd MemberFunction to type system\r\nthread append/pop through codegen\r\nfix a name shadow in generated LLL\r\n\r\nCo-authored-by: Gary Tse <tse.rong.gary@gmail.com>",
      "files_changed": [
        "tests/parser/types/test_dynamic_array.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/stmt.py",
        "vyper/lll/optimizer.py",
        "vyper/semantics/types/bases.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/semantics/types/user/interface.py",
        "vyper/semantics/types/user/struct.py",
        "vyper/semantics/types/value/address.py",
        "vyper/semantics/validation/annotation.py",
        "vyper/semantics/validation/local.py",
        "vyper/semantics/validation/utils.py"
      ],
      "insertions": 400,
      "deletions": 46,
      "original_hash": "27cec1b524072018f8866c18e1a95b010b7400ed",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "a125a8805943d974cf5ca9736ff8ae508e777ebd",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-18T18:46:28+00:00",
      "message": "feat: generalize conversion rules (#2694)\n\nThis commit refactors and changes conversion semantics to be in line\r\nwith VIP 2507. The main changes from existing behavior are:\r\n\r\n- fewer allowed conversions with address (eg. decimal/address unallowed)\r\n- decimals are bitcasted with bytes\r\n- fixes involving sign extension\r\n\r\nBy generalizing the conversion rules to not use hardcoded integer/bytes\r\ntypes, this commit lays some groundwork for more integer/bytes types\r\nsince we will not have to add a case for every single type.\r\n\r\nThis commit is a first pass; the tests should be consolidated and\r\nrefactored before release, and some cases involving conversion to bytes\r\nhave not been added yet. Also, the logic should probably be cleaned up\r\nso that it is easier to validate/reason about.",
      "files_changed": [
        "tests/parser/functions/test_convert_to_address.py",
        "tests/parser/functions/test_convert_to_bool.py",
        "tests/parser/functions/test_convert_to_bytes32.py",
        "tests/parser/functions/test_convert_to_decimal.py",
        "tests/parser/functions/test_convert_to_int128.py",
        "tests/parser/functions/test_convert_to_int256.py",
        "tests/parser/functions/test_convert_to_uint256.py",
        "tests/parser/functions/test_ecrecover.py",
        "tests/parser/functions/test_unsafe_math.py",
        "tests/parser/syntax/test_functions_call.py",
        "tests/parser/types/numbers/test_uint256.py",
        "vyper/builtin_functions/convert.py",
        "vyper/builtin_functions/functions.py",
        "vyper/builtin_functions/signatures.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/types/types.py",
        "vyper/lll/optimizer.py",
        "vyper/semantics/types/abstract.py",
        "vyper/semantics/types/value/bytes_fixed.py",
        "vyper/utils.py"
      ],
      "insertions": 560,
      "deletions": 805,
      "original_hash": "a125a8805943d974cf5ca9736ff8ae508e777ebd",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "a5fb82ff99f582f985dfd9bfc1af31750d9007d2",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-08-20T11:35:50+02:00",
      "message": "Move pack_arguments and make_setter to parser_utils.py",
      "files_changed": [
        "vyper/parser/parser.py",
        "vyper/parser/parser_utils.py"
      ],
      "insertions": 186,
      "deletions": 182,
      "original_hash": "a5fb82ff99f582f985dfd9bfc1af31750d9007d2",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "93540d86c4e54e28472e072030d3f46db5029897",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-16T20:31:20+00:00",
      "message": "fix return type wrapping again",
      "files_changed": [
        "tests/functional/codegen/test_struct_return.py",
        "vyper/old_codegen/external_call.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/return_.py",
        "vyper/old_codegen/self_call.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/validation/local.py"
      ],
      "insertions": 48,
      "deletions": 27,
      "original_hash": "93540d86c4e54e28472e072030d3f46db5029897",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "2adc34ffd3bee8b6dee90f552bbd9bb844509e19",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-06-14T12:08:26-07:00",
      "message": "feat: create_from_factory and create_copy_of (#2895)\n\n`create_copy_of` copies the runtime code at the given address\r\n`create_from_factory` treats the code at given address as initcode, and\r\ntacks on the (ABI-encoded) varargs so that the constructor interprets\r\nthem as constructor arguments.\r\n\r\nnote that these builtins break from most of vyper (and are similar to\r\nthe new `raw_call(msg.data)` usage) in that the input is not required to\r\nbe bounded in size. to do this, the usual memory allocator is bypassed,\r\nand the buffer for the create operation starts from MSIZE.\r\n\r\nalso rename `create_forwarder_to` to `create_minimal_proxy_to` (while\r\nstill allowing the old name as a deprecated alias)",
      "files_changed": [
        "docs/built-in-functions.rst",
        "tests/base_conftest.py",
        "tests/parser/exceptions/test_argument_exception.py",
        "tests/parser/exceptions/test_constancy_exception.py",
        "tests/parser/exceptions/test_syntax_exception.py",
        "tests/parser/features/test_assert.py",
        "tests/parser/functions/test_create_functions.py",
        "tests/parser/functions/test_create_with_code_of.py",
        "tests/parser/functions/test_raw_call.py",
        "tests/parser/syntax/test_create_with_code_of.py",
        "vyper/ast/validation.py",
        "vyper/builtin_functions/functions.py",
        "vyper/builtin_functions/signatures.py",
        "vyper/codegen/context.py",
        "vyper/codegen/core.py",
        "vyper/codegen/ir_node.py",
        "vyper/codegen/keccak256_helper.py",
        "vyper/ir/optimizer.py",
        "vyper/utils.py"
      ],
      "insertions": 907,
      "deletions": 282,
      "original_hash": "2adc34ffd3bee8b6dee90f552bbd9bb844509e19",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "e5960271703737131746f3d8cb064078608fc8ef",
      "author": "Edward Amor",
      "author_email": "edward.amor3@gmail.com",
      "committed_date": "2021-10-21T17:15:27-07:00",
      "message": "feat: add uint8 type (#2477)\n\n* feat: add Uint8{Definition,Primitive} classes\r\n\r\nStart of adding uint8 type to vyper\r\n\r\n* feat: add uint8 to Numeric Abstract classes\r\n\r\n* fix: add uint8 to BASE_TYPES constant in utils.py\r\n\r\n* fix: handle uint8 in `abi_type_of` fn\r\n\r\n* fix: handle uint8 in `canonicalize_type` fn\r\n\r\n* fix: handle uint8 in `clamp_basetype` fn\r\n\r\n* fix: add uint8 to `is_numeric_type` fn\r\n\r\n* fix: handle BinOp add/sub for uint8\r\n\r\n* feat: handle uint8 in parse_BinOp\r\n\r\n* fix: add uint8 to SizeLimits class + `in_bounds` classmethod\r\n\r\n* test: uint8 operations\r\n\r\nCopied over from the uint256 test\r\n\r\n* feat: handle uint8 in convert.py\r\n\r\n* fix: handle uint8 in byte_array_to_num\r\n\r\n* feat: add to_uint8 in convert.py\r\n\r\n* test: uint8 convert clamps\r\n\r\n* test: uint8 safe exponentiation\r\n\r\n* fix: imports in vyper.semantics.types.value\r\n\r\n* make int_clamp private to parser_utils\r\n\r\nfor type safety users of the module should use clamp_basetype instead.\r\n\r\n* refactor byte_array_to_num\r\n\r\n* fix minor issues with convert refactor\r\n\r\n* test: add uint8 tests to tests/parser/features/test_clampers.py\r\n\r\n* fix: increase range on clampers uint8 test\r\n\r\n* feat: add builtin interface ERC20Detailed\r\n\r\n* fix: ERC20 example use uint8 for decimals\r\n\r\n* docs: document uint8 type\r\n\r\n* chore: leave notes about test_convert_to_* tests\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>",
      "files_changed": [
        "docs/types.rst",
        "examples/tokens/ERC20.vy",
        "quicktest.sh",
        "tests/compiler/LLL/test_optimize_lll.py",
        "tests/parser/features/test_clampers.py",
        "tests/parser/functions/test_convert_to_uint256.py",
        "tests/parser/types/numbers/test_uint8.py",
        "vyper/builtin_functions/convert.py",
        "vyper/builtin_interfaces/ERC20Detailed.py",
        "vyper/lll/compile_lll.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/types/types.py",
        "vyper/semantics/types/abstract.py",
        "vyper/semantics/types/value/numeric.py",
        "vyper/utils.py"
      ],
      "insertions": 531,
      "deletions": 137,
      "original_hash": "e5960271703737131746f3d8cb064078608fc8ef",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "d791ffe9cbeb1ae91da730b9a08264c6f5e5ed8a",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-09T19:45:40-07:00",
      "message": "fix some lint/surface errors",
      "files_changed": [
        "vyper/ast/signatures/function_signature.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/arg_clamps.py",
        "vyper/old_codegen/context.py",
        "vyper/old_codegen/external_call.py",
        "vyper/old_codegen/function_definitions/common.py",
        "vyper/old_codegen/function_definitions/external_function.py",
        "vyper/old_codegen/parser.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/self_call.py",
        "vyper/old_codegen/stmt.py"
      ],
      "insertions": 70,
      "deletions": 59,
      "original_hash": "d791ffe9cbeb1ae91da730b9a08264c6f5e5ed8a",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "18d9e91a9b15f3a53309dd0230caa5e90facf7e8",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-02-09T23:26:37+00:00",
      "message": "chore: refactor dynamic arrays code (#2633)\n\nThis commit fixes some performance bugs in dynamic arrays.         \r\n                                \r\nIt uses a loop to copy dynamic arrays when the child type is also  \r\ndynamic (can take less space than is allocated for it).            \r\n                                \r\nIt also moves the loop variable in the `repeat` macro to the stack,\r\nreducing memory traffic in loops.\r\n                                \r\nIt also fixes a bug in the `in` operator where side effects in the LHS\r\ncan get repeatedly evaluated.",
      "files_changed": [
        "tests/ast/nodes/test_evaluate_compare.py",
        "tests/compiler/LLL/test_repeat.py",
        "tests/parser/types/numbers/test_constants.py",
        "tests/parser/types/test_dynamic_array.py",
        "vyper/ast/nodes.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/abi_encoder.py",
        "vyper/codegen/context.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/external_call.py",
        "vyper/codegen/function_definitions/external_function.py",
        "vyper/codegen/lll_node.py",
        "vyper/codegen/module.py",
        "vyper/codegen/return_.py",
        "vyper/codegen/self_call.py",
        "vyper/codegen/stmt.py",
        "vyper/codegen/types/check.py",
        "vyper/codegen/types/types.py",
        "vyper/lll/README.md",
        "vyper/lll/compile_lll.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/utils.py"
      ],
      "insertions": 483,
      "deletions": 359,
      "original_hash": "18d9e91a9b15f3a53309dd0230caa5e90facf7e8",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "4a1ace03380620d98ea365eeb88544cafbfe0f13",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-11-16T21:45:25+00:00",
      "message": "refactor: abstract `ensure_in_memory` pattern (#2481)\n\nThere is a common pattern in the codebase which checks if a bytestring\r\nis in memory and copies if not. This abstracts the pattern into a   \r\nfunction, and additionally applies it to the raw_call function for about\r\n20 bytes savings per usage of raw_call (when the input is already in\r\nmemory).",
      "files_changed": [
        "tests/parser/features/test_immutable.py",
        "tests/parser/functions/test_raw_call.py",
        "tests/parser/syntax/test_immutables.py",
        "vyper/builtin_functions/functions.py",
        "vyper/old_codegen/events.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/keccak256_helper.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/stmt.py"
      ],
      "insertions": 102,
      "deletions": 141,
      "original_hash": "4a1ace03380620d98ea365eeb88544cafbfe0f13",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "43f5f2c0a3eadca2ebe58b06b03cf7b0960b6fe0",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-10-03T17:41:09+00:00",
      "message": "move clamp_basetype into make_setter\n\nthis avoids a double dereference.",
      "files_changed": [
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 19,
      "deletions": 16,
      "original_hash": "43f5f2c0a3eadca2ebe58b06b03cf7b0960b6fe0",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "2db19b0d0d2f02b117b18b90cba49c6daf5285de",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-14T16:08:58+00:00",
      "message": "fix some formatting",
      "files_changed": [
        "vyper/old_codegen/context.py",
        "vyper/old_codegen/function_definitions/external_function.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/utils.py"
      ],
      "insertions": 14,
      "deletions": 4,
      "original_hash": "2db19b0d0d2f02b117b18b90cba49c6daf5285de",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "1368adb5c6e4050d2be516952987226bd8f9c0ee",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-02-14T14:23:56-08:00",
      "message": "add empty list literals for dynarray (#2658)\n\nnote: this modifies make_setter for list literals since the type of the\r\nRHS is no longer SArrayType",
      "files_changed": [
        "tests/parser/exceptions/test_invalid_literal_exception.py",
        "tests/parser/exceptions/test_invalid_type_exception.py",
        "tests/parser/syntax/test_list.py",
        "tests/parser/types/test_dynamic_array.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/types/convert.py",
        "vyper/semantics/validation/annotation.py",
        "vyper/semantics/validation/utils.py"
      ],
      "insertions": 68,
      "deletions": 50,
      "original_hash": "1368adb5c6e4050d2be516952987226bd8f9c0ee",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "ef1e6e4f48647085694047fb5a5993a57305a0e3",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-01-06T14:18:50-08:00",
      "message": "feat: implement dynamic arrays (#2556)\n\nThis commit implements Solidity-ABI-compatible dynamic arrays in vyper.\r\n\r\nDynamic arrays have the type `DynArray[<type>, <maxlen>]`. They are\r\nimplemented similarly to bytestrings, with a single length word followed\r\nby the data, <len> <data...>.\r\n\r\nIt also adds some code to clarify between the sizes of objects\r\nwhen they are in memory vs in storage.\r\n\r\nThis commit also refactors a lot of code dealing with encoding and byte\r\ncopying. Byte copying is cheaper now since previously the logic was\r\n```\r\nfor i in range(maxlen // 32):\r\n    if i > len:\r\n        break\r\n    sstore(dst + i, mload(src + 32*i))\r\n```\r\n\r\nThis was necessary because the `repeat` opcode in LLL requires a max\r\nbound. Now, we have repeat(len, maxlen), which still enforces the max\r\nbound but breaks once it hits the minimum of `len` and `maxlen`. Now the\r\nbyte copier loop has the logic of:\r\n\r\n```\r\nfor i in range( min(len, maxlen) ):\r\n    sstore(dst + i, mload(src + 32*i))\r\n```\r\n\r\nIt also adds a method to the LLLnode API, `cache_when_complex`. This\r\nabstracts the logic for checking when an LLL expression needs to be\r\ncached using a `with` expression. This was used to simplify the ABI\r\nencoder and several routines related to copying (including\r\n`make_setter`).",
      "files_changed": [
        "tests/functional/codegen/test_abi_encode.py",
        "tests/functional/codegen/test_struct_return.py",
        "tests/functional/context/validation/test_potential_types.py",
        "tests/grammar/vyper.lark",
        "tests/parser/features/decorators/test_nonreentrant.py",
        "tests/parser/features/external_contracts/test_external_contract_calls.py",
        "tests/parser/features/external_contracts/test_self_call_struct.py",
        "tests/parser/features/test_clampers.py",
        "tests/parser/functions/test_empty.py",
        "tests/parser/syntax/test_nested_list.py",
        "tests/parser/types/test_dynamic_array.py",
        "tests/parser/types/test_node_types.py",
        "vyper/ast/signatures/function_signature.py",
        "vyper/builtin_functions/functions.py",
        "vyper/builtin_functions/signatures.py",
        "vyper/lll/compile_lll.py",
        "vyper/lll/optimizer.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/context.py",
        "vyper/old_codegen/events.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/external_call.py",
        "vyper/old_codegen/function_definitions/external_function.py",
        "vyper/old_codegen/global_context.py",
        "vyper/old_codegen/lll_node.py",
        "vyper/old_codegen/memory_allocator.py",
        "vyper/old_codegen/parser.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/return_.py",
        "vyper/old_codegen/self_call.py",
        "vyper/old_codegen/stmt.py",
        "vyper/old_codegen/types/check.py",
        "vyper/old_codegen/types/types.py",
        "vyper/semantics/types/__init__.py",
        "vyper/semantics/types/bases.py",
        "vyper/semantics/types/function.py",
        "vyper/semantics/types/indexable/sequence.py",
        "vyper/semantics/types/user/event.py",
        "vyper/semantics/types/user/interface.py",
        "vyper/semantics/types/user/struct.py",
        "vyper/semantics/types/value/array_value.py",
        "vyper/semantics/types/value/numeric.py",
        "vyper/semantics/validation/annotation.py",
        "vyper/semantics/validation/utils.py"
      ],
      "insertions": 1753,
      "deletions": 817,
      "original_hash": "ef1e6e4f48647085694047fb5a5993a57305a0e3",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "2fddbdeb4971dc8f1ac0ca7aa968819898c3a809",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-06-21T07:04:20-07:00",
      "message": "feat: add optimizer guardrails, refactor (#2914)\n\nthis commit factors out and generalizes the optimizer logic for\r\ncomparison operators. it clarifies the logic for dealing with boundary\r\ncases, and cleans up the control flow in the optimizer in general. it\r\nalso adds an assembly peephole optimization to help optimize the\r\nassembly generated by the comparator pass.\r\n\r\nthis commit also introduces a new IR keyword, \"unique_symbol\". it\r\nfunctions as a guardrail to help ensure optimizer passes are sane. it is\r\na statement that codegen can insert into the IR, and sanity checks will\r\nbe performed to make sure that the statement is not optimized out, and\r\nin some cases, to ensure that the statement shows up in the optimized\r\nIR. it can be thought of as a very primitive effects tracking framework.\r\n\r\nlastly, some tests are added to increase optimizer coverage.",
      "files_changed": [
        "tests/compiler/ir/test_optimize_ir.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/core.py",
        "vyper/codegen/external_call.py",
        "vyper/codegen/ir_node.py",
        "vyper/codegen/self_call.py",
        "vyper/compiler/__init__.py",
        "vyper/compiler/output.py",
        "vyper/ir/compile_ir.py",
        "vyper/ir/optimizer.py"
      ],
      "insertions": 478,
      "deletions": 196,
      "original_hash": "2fddbdeb4971dc8f1ac0ca7aa968819898c3a809",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "efe1dbef873af6995833d1220a3d56978dfb9de0",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-05-10T09:12:42+00:00",
      "message": "feat: more arithmetic optimizations (#2647)\n\nthis is a small rewrite of the IR optimizer. it changes the structure of\r\nthe binop optimizations so that it is easier to add more optimizations.\r\nit also refactors the `clamp` optimizations to be in terms of an\r\n`assert` statement, so that the clamp conditions can be optimized using\r\nthe binop optimizer code.\r\n\r\nCo-authored-by: El De-dog-lo <3859395+fubuloubu@users.noreply.github.com>",
      "files_changed": [
        "examples/auctions/blind_auction.vy",
        "tests/compiler/LLL/__init__.py",
        "tests/compiler/LLL/test_compile_lll.py",
        "tests/compiler/LLL/test_optimize_lll.py",
        "tests/compiler/LLL/test_repeat.py",
        "tests/compiler/LLL/test_with.py",
        "tests/compiler/ir/__init__.py",
        "tests/compiler/ir/test_compile_ir.py",
        "tests/compiler/ir/test_optimize_ir.py",
        "tests/compiler/ir/test_repeat.py",
        "tests/compiler/ir/test_with.py",
        "tests/compiler/test_clamps.py",
        "tests/parser/features/test_assert.py",
        "tests/parser/features/test_assert_unreachable.py",
        "tests/parser/functions/test_raw_call.py",
        "tests/parser/syntax/test_unbalanced_return.py",
        "vyper/builtin_functions/convert.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py",
        "vyper/codegen/ir_node.py",
        "vyper/codegen/return_.py",
        "vyper/codegen/stmt.py",
        "vyper/evm/opcodes.py",
        "vyper/exceptions.py",
        "vyper/ir/README.md",
        "vyper/ir/compile_ir.py",
        "vyper/ir/optimizer.py",
        "vyper/utils.py"
      ],
      "insertions": 994,
      "deletions": 873,
      "original_hash": "efe1dbef873af6995833d1220a3d56978dfb9de0",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "45cbea90d3570b4b7b20f38341b25d27d2377ea4",
      "author": "vub",
      "author_email": "Vitalik Buterin",
      "committed_date": "2017-04-29T21:20:51-04:00",
      "message": "Added positional annotations",
      "files_changed": [
        "viper/functions.py",
        "viper/parser.py",
        "viper/parser_utils.py"
      ],
      "insertions": 161,
      "deletions": 125,
      "original_hash": "45cbea90d3570b4b7b20f38341b25d27d2377ea4",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "c2443ba679e75426c09a57b842252ccf000e7620",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2018-04-26T12:07:09+02:00",
      "message": "Merge branch 'master' into 769_storage_variable_layout",
      "files_changed": [
        ".gitignore",
        ".snapcraft/travis_snapcraft.cfg",
        ".travis.yml",
        "docs/compiling-a-contract.rst",
        "docs/vyper-by-example.rst",
        "setup.py",
        "tests/parser/features/iteration/test_break.py",
        "tests/parser/syntax/test_bool.py",
        "vyper/functions/functions.py",
        "vyper/parser/expr.py",
        "vyper/parser/parser.py",
        "vyper/parser/parser_utils.py",
        "vyper/parser/stmt.py",
        "vyper/types/types.py",
        "vyper/utils.py"
      ],
      "insertions": 129,
      "deletions": 94,
      "original_hash": "c2443ba679e75426c09a57b842252ccf000e7620",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "846794ffdf73c0713ab1aea5b52539c1d1e0f3d1",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-29T23:42:04+00:00",
      "message": "fix dynamic array clampers for certain child types (#2731)\n\nthe following code did not generate int128 clampers:\r\n```\r\n@external\r\ndef foo(b: DynArray[int128[5], 2]) -> DynArray[int128[5], 2]:\r\n    return b\r\n```",
      "files_changed": [
        "vyper/codegen/core.py"
      ],
      "insertions": 13,
      "deletions": 0,
      "original_hash": "846794ffdf73c0713ab1aea5b52539c1d1e0f3d1",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "f4fd13426e24088a5d0fb58429227f5289f4d74d",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-16T02:29:39+00:00",
      "message": "fix abi tuple wrapping",
      "files_changed": [
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 16,
      "deletions": 9,
      "original_hash": "f4fd13426e24088a5d0fb58429227f5289f4d74d",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "d2808d060a0b078d9d7c5aa81205b75b963c1b80",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-10-01T21:22:23+00:00",
      "message": "elide copies of zero-element tuples\n\nSounds weird but zero-element tuples are generated all the time in\ncodegen (e.g. zero function args). The code is cleaner to handle it in\nmake_setter than at all the call sites.",
      "files_changed": [
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 3,
      "deletions": 0,
      "original_hash": "d2808d060a0b078d9d7c5aa81205b75b963c1b80",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "3d04c4fd5fdc6068fce6c06f9399e671739eedca",
      "author": "Vitalik Buterin",
      "author_email": "v@buterin.com",
      "committed_date": "2017-09-23T03:23:15-04:00",
      "message": "Added ecadd and ecmul support",
      "files_changed": [
        "examples/voting/ballot.v.py",
        "tests/setup_transaction_tests.py",
        "tests/test_parser.py",
        "viper/exceptions.py",
        "viper/functions.py",
        "viper/parser.py",
        "viper/parser_utils.py"
      ],
      "insertions": 252,
      "deletions": 116,
      "original_hash": "3d04c4fd5fdc6068fce6c06f9399e671739eedca",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "3bcdde31c739a8bbe415de3413de52c6e96327db",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-24T15:06:32+00:00",
      "message": "fix: bugs in slice (#2715)\n\nfix a couple bugs in slice:\r\n```\r\ns: Bytes[100]\r\n@external\r\ndef f(data: Bytes[100]) -> bytes32:\r\n    self.s = data\r\n    # BUG: division by zero at compile time\r\n    return convert(slice(self.s, 0, 1), bytes32)\r\n```\r\n```\r\ns: Bytes[100]\r\n@external\r\ndef foo(data: Bytes[100]) -> Bytes[100]:\r\n    self.s = data\r\n    # BUG: runtime bug, does not copy last byte\r\n    return slice(self.s, 32, 33)\r\n```\r\nalso add a bunch of test cases for slice so this doesn't happen again,\r\nand check some OOB conditions at compile time.\r\n\r\nalso\r\n- slight refactoring of `copy_bytes` for clarity.\r\n\r\n- fix optimizer semantics for div and mod\r\n\r\n    the semantics differ with negative numbers and when the divisor is 0.\r\n\r\n    (we only use get_int_at with signed=False for div and mod so the\r\n    signedness difference never gets tripped, but it's still good to\r\n    change for clarity.)\r\n\r\n- add optimizer rule for iszero\r\n- add optimizer rules for multiplication by 1",
      "files_changed": [
        "tests/parser/functions/test_slice.py",
        "tests/parser/syntax/test_address_code.py",
        "tests/parser/syntax/test_msg_data.py",
        "vyper/builtin_functions/convert.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/core.py",
        "vyper/lll/optimizer.py",
        "vyper/semantics/validation/local.py"
      ],
      "insertions": 250,
      "deletions": 176,
      "original_hash": "3bcdde31c739a8bbe415de3413de52c6e96327db",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "d762ea69b1fd887e3177d82e146a3d84c5700514",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-12T10:51:39-07:00",
      "message": "add byte array copier cases for calldata and code",
      "files_changed": [
        "vyper/old_codegen/parser_utils.py"
      ],
      "insertions": 28,
      "deletions": 16,
      "original_hash": "d762ea69b1fd887e3177d82e146a3d84c5700514",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "4c5705df7e64cc2a131648f8560115ffd1a2c220",
      "author": "vub",
      "author_email": "Vitalik Buterin",
      "committed_date": "2017-03-21T05:11:18-04:00",
      "message": "RLP decoder support",
      "files_changed": [
        "tests/test_invalids.py",
        "tests/test_parser.py",
        "viper/functions.py",
        "viper/parser.py",
        "viper/parser_utils.py",
        "viper/types.py",
        "viper/utils.py"
      ],
      "insertions": 325,
      "deletions": 53,
      "original_hash": "4c5705df7e64cc2a131648f8560115ffd1a2c220",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "5dcd8a782715d5fd407a13a3afb9829001bc1fcb",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-03-30T17:45:13-07:00",
      "message": "feat: optimize return statements (#2735)\n\nThis commit optimizes return statements for the common case where the\r\nreturned value is already in memory and already ABI encoded (as in the\r\nbelow examples), by skipping the ABI encoding routine.\r\n```\r\n@external  \r\ndef foo(x: uint256) -> uint256:\r\n    return x\r\n      \r\n@external  \r\ndef bar() -> int128\r\n    x: int128 = 1\r\n    return x\r\n```\r\n\r\nAlso makes bufsz a non-optional parameter to abi_encode. This is a\r\nsafety thing, so users of abi_encode don't accidentally forget to\r\nprovide the bufsz safety check.",
      "files_changed": [
        "vyper/codegen/abi_encoder.py",
        "vyper/codegen/core.py",
        "vyper/codegen/return_.py"
      ],
      "insertions": 70,
      "deletions": 41,
      "original_hash": "5dcd8a782715d5fd407a13a3afb9829001bc1fcb",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "049dbdc647b2ce838fae7c188e6bb09cf16e470b",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-04-13T06:39:37-07:00",
      "message": "Merge pull request from GHSA-j2x6-9323-fp7h\n\nThis commit addresses two issues in validating returndata, both related\nto the inferred type of the external call return.\n\nFirst, it addresses an issue with interfaces imported from JSON. The\nJSON_ABI encoding type was added in 0.3.0 as part of the calling\nconvention refactor to mimic the old code's behavior when the signature\nof a function had `is_from_json` toggled to True. However, both\nimplementations were a workaround for the fact that in\nFunctionSignatures from JSON with Bytes return types, length is set to 1\nas a hack to ensure they always typecheck - almost always resulting in a\nruntime revert.\n\nThis commit removes the JSON_ABI encoding type, so that dynamic\nreturndata from an interface defined with .json ABI file cannot result\nin a buffer overrun(!). To avoid the issue with always runtime\nreverting, codegen uses the uses the inferred ContractFunction type of\nthe Call.func member (which is both more accurate than the inferred type\nof the Call expression, and the return type on the FunctionSignature!)\nto calculate the length of the external Bytes array.\n\nSecond, this commit addresses an issue with validating call returns in\ncomplex expressions. In the following examples, the type of the call\nreturn is either inferred incorrectly or it takes a path through codegen\nwhich avoids generating runtime clamps:\n\n```\ninterface Foo:\n    def returns_int128() -> int128: view\n    def returns_Bytes3() -> Bytes[3]: view\n\nfoo: Foo\n...\nx: uint256 = convert(self.foo.returns_int128(), uint256)\ny: Bytes[32] = concat(self.foo.returns_Bytes3(), b\"\")\n```\n\nTo address this issue, if the type of returndata needs validation, this\ncommit decodes the returndata \"strictly\" into a newly allocated buffer\nat the time of the call, to avoid unvalidated data accidentally getting\ninto the runtime. This does result in extra memory traffic which is a\nperformance hit, but the performance issue can be addressed at a later\ndate with a zero-copy buffering scheme (parent Expr allocates the\nbuffer).\n\nAdditional minor fixes and cleanup:\n- fix compiler panic in new_type_to_old_type for Tuples\n- remove `_should_decode` helper function as it duplicates `needs_clamp`\n- minor optimization in returndatasize check - assert ge uses one fewer\n  instruction than assert gt.",
      "files_changed": [
        "tests/parser/functions/test_interfaces.py",
        "vyper/codegen/core.py",
        "vyper/codegen/external_call.py",
        "vyper/codegen/function_definitions/external_function.py",
        "vyper/codegen/ir_node.py",
        "vyper/codegen/types/convert.py"
      ],
      "insertions": 214,
      "deletions": 80,
      "original_hash": "049dbdc647b2ce838fae7c188e6bb09cf16e470b",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "0c934c467c545d5078d6f081a6f82861b1a2aabe",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2020-04-08T17:26:11+00:00",
      "message": "fix type check when rhs is empty list/struct",
      "files_changed": [
        "vyper/parser/parser_utils.py"
      ],
      "insertions": 9,
      "deletions": 0,
      "original_hash": "0c934c467c545d5078d6f081a6f82861b1a2aabe",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "58a5ae5dea951269dfd0279f5fcfd4cda749dd9f",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-06-15T11:54:53-07:00",
      "message": "chore: polishing for codegen (#2794)\n\nadd some notes, and a small conversion optimization:\r\nskip `unwrap_location` if the conversion does not do anything. this\r\ntriggers downstream zero-copy optimizations.\r\n\r\nalso skip a copy if the length is known to be 0 at compile-time.",
      "files_changed": [
        "vyper/builtin_functions/convert.py",
        "vyper/codegen/abi_encoder.py",
        "vyper/codegen/core.py",
        "vyper/codegen/expr.py"
      ],
      "insertions": 35,
      "deletions": 19,
      "original_hash": "58a5ae5dea951269dfd0279f5fcfd4cda749dd9f",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "7be701f01f020411810762f8f7f9847568b762a8",
      "author": "Jacques Wagener",
      "author_email": "jacques@dilectum.co.za",
      "committed_date": "2017-11-09T12:28:27+02:00",
      "message": "Various changes to gas estimation.\n\n- Fixes with statement estimation to total all underlying args.\n- Adds add_gas parameter to LLLNode to allow more advanced gas calculations to\nbe assigned to an LLLNode, see make_byte_array_copier as an example.",
      "files_changed": [
        "viper/parser/parser_utils.py"
      ],
      "insertions": 24,
      "deletions": 11,
      "original_hash": "7be701f01f020411810762f8f7f9847568b762a8",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "8a88a6ba1fcfb865992aa86f5ef994e9478886f5",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-02-13T15:26:24-08:00",
      "message": "fix: array index clamp bug (#2645)\n\nthis fixes an array index clamp bug introduced in #2556 where negative\r\nnumbers are not clamped properly  \r\n                                  \r\nit also                           \r\n                                  \r\n- streamlines logic by taking advantage of downstream optimizations\r\n- blocks user indexing into `empty` arrays\r\n- cleans up optimizer code        \r\n- adds various `slice` tests (in preparation for rewrite)",
      "files_changed": [
        "tests/functional/codegen/test_abi_encode.py",
        "tests/parser/functions/test_slice.py",
        "tests/parser/types/test_bytes_literal.py",
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/context.py",
        "vyper/codegen/core.py",
        "vyper/codegen/lll_node.py",
        "vyper/lll/compile_lll.py",
        "vyper/lll/optimizer.py",
        "vyper/utils.py"
      ],
      "insertions": 256,
      "deletions": 232,
      "original_hash": "8a88a6ba1fcfb865992aa86f5ef994e9478886f5",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "ddc7786ae530e0118825ff2741557afc28a21867",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-14T02:45:46+00:00",
      "message": "redo lazy abi decoder\n\nreturning a multi from lazy_abi_decode ran into issues with dynamic\nindexes into lists. moving the logic into add_variable_offset allows us\nto handle this case.",
      "files_changed": [
        "vyper/ast/signatures/function_signature.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/expr.py",
        "vyper/old_codegen/external_call.py",
        "vyper/old_codegen/function_definitions/external_function.py",
        "vyper/old_codegen/lll_node.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/return_.py",
        "vyper/old_codegen/self_call.py",
        "vyper/semantics/validation/local.py",
        "vyper/utils.py"
      ],
      "insertions": 206,
      "deletions": 175,
      "original_hash": "ddc7786ae530e0118825ff2741557afc28a21867",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "26aefafc12424996f07434fb97816195c57ecc56",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-08-02T21:51:13+00:00",
      "message": "refactor events to use abi_encode\n\n- use abi_encode for the data\n- use keccak256_helper for non-basetype topics\n- block non-value types in indexes\n\nnote: a test for blocked functionality has been removed because the functionality now works",
      "files_changed": [
        "tests/parser/exceptions/test_structure_exception.py",
        "tests/parser/features/test_logging.py",
        "vyper/builtin_functions/functions.py",
        "vyper/old_codegen/abi.py",
        "vyper/old_codegen/events.py",
        "vyper/old_codegen/keccak256_helper.py",
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/stmt.py",
        "vyper/semantics/types/user/event.py"
      ],
      "insertions": 161,
      "deletions": 347,
      "original_hash": "26aefafc12424996f07434fb97816195c57ecc56",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "eef47669d1cbc094bd414854c108be08b12cd2a4",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2021-09-16T17:07:37+00:00",
      "message": "fix external call return wrapping",
      "files_changed": [
        "vyper/old_codegen/parser_utils.py",
        "vyper/old_codegen/return_.py"
      ],
      "insertions": 17,
      "deletions": 5,
      "original_hash": "eef47669d1cbc094bd414854c108be08b12cd2a4",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    },
    {
      "hash": "548d35d720fb6fd8efbdc0ce525bed259a73f0b9",
      "author": "Charles Cooper",
      "author_email": "cooper.charles.m@gmail.com",
      "committed_date": "2022-02-14T16:19:35-08:00",
      "message": "chore: refactor slice for clarity and performance   (#2653)\n\nthis commit rewrites the `slice` builtin, commenting how the algorithm\r\nworks and also optimizing several cases:\r\n- source is memory, calldata or code (no unaligned word needed)\r\n- start is a multiple of 32 (no unaligned word needed)\r\n- type is bytes32, or Bytes[maxlen <= 32]",
      "files_changed": [
        "vyper/builtin_functions/functions.py",
        "vyper/codegen/core.py",
        "vyper/codegen/lll_node.py",
        "vyper/lll/optimizer.py"
      ],
      "insertions": 170,
      "deletions": 147,
      "original_hash": "548d35d720fb6fd8efbdc0ce525bed259a73f0b9",
      "malicious_files": [
        "vyper/codegen/core.py"
      ]
    }
  ]
}